{"code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D iChannel0, iChannel1, bb;\n\n\nvarying vec2 surfacePosition;\n\n#define iGlobalTime time*0.1 + length(surfacePosition)\n\n//orbit traps from julia version of fractal formula z=(z+1/z+c)*-scale;\n\n#define zoom 5.\n#define offset vec2(0.3,0.2)\n\n#define iterations 27\n#define scale -.4\n#define julia ((mouse-.5)*4.)\n\n#define orbittraps vec3(.8,.5,-.01)\n#define trapswidths vec3(.2,.2,.3)\n\n#define trap1color vec3(1.00,0.30,0.10)\n#define trap2color vec3(1.00,0.50,0.10)\n#define trap3color vec3(0.10,0.20,1.00)\n\n#define trapsbright vec3(1.,.8,.7)\n#define trapscontrast vec3(5.,10.,5.)\n\n#define trapsfreq vec3(5.,8.,20.)\n#define trapsamp vec3(.03,.03,.01)\n#define trapspeeds vec3(20.,20.,40.)\n\n#define saturation .5\n#define brightness .9\n#define contrast 1.35\n#define minbright .3\n\n#define antialias 1. //max 4\n\n\nvec2 rotate(vec2 p, float angle) {\nreturn p*mat2(cos(angle),sin(angle),-sin(angle),cos(angle));\n}\n\nvoid main(void)\n{\n\tvec3 aacolor=vec3(0.);\n\tvec2 uv=gl_FragCoord.xy / resolution - 0.5;\n\tfloat aspect=resolution.x/resolution.y;\n\tvec2 pos=uv;\n\tpos.x*=aspect;\n\tfloat t=iGlobalTime*.07;\n\tfloat zoo=.005+pow(abs(sin(t*.5+1.4)),5.)*zoom;\n\tpos=rotate(pos,t*2.442365);\n\tpos+=offset;\n\tpos*=zoo; \n\tvec2 pixsize=2./resolution*zoo;\n\tpixsize.x*=aspect;\n\tfloat av=0.;\n\tvec3 its=vec3(0.);\n\tfor (float aa=0.; aa<16.; aa++) {\n\t\tvec3 otrap=vec3(12000.);\n\t\tif (aa<antialias*antialias) {\n\t\t\tvec2 aacoord=floor(vec2(aa/antialias,mod(aa,antialias)));\n\t\t\tvec2 z=pos+aacoord*pixsize/antialias;\n\t\t\tfor (int i=0; i<iterations; i++) {\n\t\t\t\tvec2 cz=vec2(z.x,-z.y);\n\t\t\t\tz=z+cz/dot(z,z)+julia;\n\t\t\t\tz=z*scale;\n\t\t\t\tfloat l=length(z);\n\t\t\t\tvec3 ot=abs(vec3(l)-orbittraps+\n\t\t\t\t\t(sin(pos.x*trapsfreq/zoo+t*trapspeeds)+\n\t\t\t\t\t sin(pos.y*trapsfreq/zoo+trapspeeds))*trapsamp);\n\t\t\t\tif (ot.x<otrap.x) {\n\t\t\t\t\totrap.x=ot.x;\n\t\t\t\t\tits.x=float(iterations-i);\t\n\t\t\t\t}\n\t\t\t\tif (ot.y<otrap.y) {\n\t\t\t\t\totrap.y=ot.y;\n\t\t\t\t\tits.y=float(iterations-i);\t\n\t\t\t\t}\n\t\t\t\tif (ot.z<otrap.z) {\n\t\t\t\t\totrap.z=ot.z;\n\t\t\t\t\tits.z=float(iterations-i);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\totrap=pow(max(vec3(0.),trapswidths-otrap)/trapswidths,trapscontrast);\n\t\tits=its/float(iterations);\n\t\tvec3 otcol1=otrap.x*pow(trap1color,3.5-vec3(its.x*1.5))*max(minbright,its.x)*trapsbright.x;\n\t\tvec3 otcol2=otrap.y*pow(trap2color,3.5-vec3(its.y*4.))*max(minbright,its.y)*trapsbright.y;\n\t\tvec3 otcol3=otrap.z*pow(trap3color,3.5-vec3(its.z*4.875))*max(minbright,its.z)*trapsbright.z;\n\t\taacolor+=(otcol1+otcol2+otcol3);\n\t}\n\taacolor=aacolor/(antialias*antialias)+.15;\n\tvec3 color=mix(vec3(length(aacolor)),aacolor,saturation)*brightness;\n\tcolor=pow(color,vec3(contrast));\t\t\n\tgl_FragColor = vec4(color,1.0);\n}", "user": "6e76951", "parent": "/e#17512.0", "id": "17548.1"}