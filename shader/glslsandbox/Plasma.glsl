{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n\nfloat fbm(vec2 v) {\n\tint i;\n\tfloat c = 0.0;\n\tfloat w = 0.5;\n\tfloat s = 2.0;\n\t\n\tc = c + pow(w,0.0)*cnoise(v*pow(s,0.0));\n\tc = c + pow(w,1.0)*cnoise(v*pow(s,1.0));\n\tc = c + pow(w,2.0)*cnoise(v*pow(s,2.0));\n\tc = c + pow(w,3.0)*cnoise(v*pow(s,3.0));\n\tc = c + pow(w,4.0)*cnoise(v*pow(s,4.0));\n\tc = c + pow(w,5.0)*cnoise(v*pow(s,5.0));\n\tc = c + pow(w,6.0)*cnoise(v*pow(s,6.0));\n\tc = c + pow(w,7.0)*cnoise(v*pow(s,7.0));\t\n\tc = c + pow(w,8.0)*cnoise(v*pow(s,8.0));\n\t//c = c + pow(w,9.0)*cnoise(v*pow(s,9.0));\n\t//c = c + pow(w,10.0)*cnoise(v*pow(s,10.0));\n\t\n\treturn c+0.5;\n}\n\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tvec2 p = uv+1.0;\n\tvec2 q = vec2(fbm(p), fbm(p+vec2(5.2,1.3)));\n\t//vec2 r = vec2(fbm(p+4.0*q+vec2(1.7,9.2)), fbm(p+4.0*q+vec2(8.3,2.8)));\n\tfloat c;\n\t//c = fbm(p);\n\tc = fbm(p+4.0*q+0.2*time);\n\t//c = fbm(p+1.0*r+0.1*time);\n\tgl_FragColor = vec4(c-.1, c, c+.1, 1.);\n}", "user": "8c33dd2", "parent": "/e#7533.0", "id": "7773.2"}