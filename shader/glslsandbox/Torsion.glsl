{"code": "#version 100\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define ITER_MAX 100\n#define MAX_DIST 50.0\n#define EPS 0.002\n\nfloat sphere(in vec3 p, float radius)\n{\n\treturn length(p) - radius;\n}\n\nfloat box(in vec3 p, in vec3 sz, float r)\n{\n\treturn length(max(abs(p) - sz, 0.0)) - r;\t\n}\n\nvec3 twist(in vec3 p)\n{\n\tfloat c = cos(6. * p.y * sin(time*.2));\n\tfloat s = sin(6. * p.y * sin(time*.2));\n\n\tmat2  m = mat2(c, -s, s, c);\n\tvec3  q = vec3(m * p.xz, p.y);\n\t\n\treturn q;\n\n}\n\nfloat F(in vec3 p)\n{\n\treturn box(twist(p+vec3(0.,2.,0.)), vec3(.3+cos((time+p.y)*3.)*.3, .3+sin((time+p.y)*5.)*.2, 4.9), 0.1);\n\t//return sphere(twist(p), 1.0);\n}\n\nvec3 getNormal(vec3 p)\n{\n\tvec3 e = vec3(0.0, EPS, 0.0);\n\tvec3 n = vec3(F(p + e.yxx) - F(p - e.yxx),\n                      F(p + e.xyx) - F(p - e.xyx),\n                      F(p + e.xxy) - F(p - e.xxy));\n        n = normalize(n);\n        return n;\n}\n\n\nvec3 rayCast(in vec3 o, in vec3 d)\n{\n\tfloat dist = 0.0;\n\tfloat totalDist = 0.0;\n\tvec3 FogColor = vec3(0.5);\n\tvec3 color = FogColor * 0.5;\n\tfloat minDist = 0.0001;\n\t\n\tvec3 LightPos = vec3(2.0, 1.5, 1.0);\n\tvec3 LightColor = vec3(0.8, 0.8, 0.8);\n\t\n\tfor (int step = 0; step < ITER_MAX; step++)\n\t{\n\t\tvec3 p = o + totalDist * d;\n\t\tdist = F(p)*.5; // mul * const to allow for more distortion\n\t\ttotalDist += dist;\n\t\n\t\tif (dist < minDist)\n\t\t\tbreak;\n\t\t\n\t\tif (totalDist > MAX_DIST)\n\t\t{\n\t\t\ttotalDist = MAX_DIST;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// hit\n\tif (dist < 0.001)\n\t{\n\t\tvec3 P = o + totalDist * d;\n\t\tvec3 N = getNormal(P); //P; // sphere normal = P\n\t\tvec3 L = normalize(LightPos - P);\n\t\t// Phong et falloff todo\n\t\t//vec3 V, H\n\t\t//float falloff = ...\n\t\t\n\t\tfloat ambient = max(0.1, dot(N, d));\n\t\tfloat diffuse = max(0.0, dot(N, L));\n\t\t\n\t\t//float spec = todo\n\t\t//float ao = todo\n\t\t\n\t\tvec3 objColor = vec3(0.9, 0.6, 0.3);\n\t\t\n\t\tcolor = (objColor *  LightColor * diffuse) + (objColor * ambient);\n\t\t\n\t\t// *= ao;\n\t}\n\n\tcolor = mix(color, FogColor, smoothstep(0.0, 1.0, totalDist / MAX_DIST));\n\treturn color;\n\t\n}\n\nvoid main( void )\n{\n\n\tvec2 texcoord = gl_FragCoord.xy / resolution;\n\tvec2 pix = -1.0 + 2.0 * texcoord;\n\tpix.x *= resolution.x / resolution.y;\n\tpix.x = -pix.x;\n\n\tfloat r = abs(sin(time / 12.0) * 4.0) + 2.0;\n\tvec3 campos = vec3(1.8, 3.0, 1.0);//vec3(r * cos(time), sin(time / 5.0), r * sin(time));\n\t\n\tvec3 camLookAt = vec3(0.0, 0.9, 0.0);\n\tvec3 upVector = normalize(vec3(0.7, 1.0, 0.0));\n\n\tvec3 rayOrigin = campos;\n\tvec3 ww = normalize(camLookAt - rayOrigin);\n\tvec3 uu = normalize(cross(upVector, ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rayDir = normalize(pix.x * uu + pix.y * vv + 1.5 * ww);\n\t\t\n\tvec3 color = rayCast(rayOrigin, rayDir);\n\t\n\tgl_FragColor = vec4(color, 1.0);\n\n}", "user": "65c36c6", "parent": "/e#6547.2", "id": "6563.0"}