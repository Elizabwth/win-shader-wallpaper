{"code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n// srtuss, 2015\n\n// simplified by Mr Caca\n\n#define pi 3.141592653589793238462\n\nstruct ITSC\n{\n\tvec3 p;\n\tfloat dist;\n\tvec3 n;\n    vec2 uv;\n};\n\nITSC raycylh(vec3 ro, vec3 rd, vec3 c, float r)\n{\n\tITSC i;\n\ti.dist = 1e38;\n\tvec3 e = ro - c;\n\tfloat a = dot(rd.xy, rd.xy);\n\tfloat b = 2.0 * dot(e.xy, rd.xy);\n\tfloat cc = dot(e.xy, e.xy) - r;\n\tfloat f = b * b - 4.0 * a * cc;\n\tif(f > 0.0)\n\t{\n\t\tf = sqrt(f);\n\t\tfloat t = (-b + f) / (2.0 * a);\n\t\t\n\t\tif(t > 0.001)\n\t\t{\n\t\t\ti.dist = t;\n\t\t\ti.p = e + rd * t;\n\t\t\ti.n = -vec3(normalize(i.p.xy), 0.0);\n\t\t}\n\t}\n\treturn i;\n}\n\nvoid tPlane(inout ITSC hit, vec3 ro, vec3 rd, vec3 o, vec3 n, vec3 tg, vec2 si)\n{\n    vec2 uv;\n    ro -= o;\n    float t = -dot(ro, n) / dot(rd, n);\n    if(t < 0.0)\n        return;\n    vec3 its = ro + rd * t;\n    uv.x = dot(its, tg);\n    uv.y = dot(its, cross(tg, n));\n    if(abs(uv.x) > si.x || abs(uv.y) > si.y)\n        return;\n    \n    //if(t < hit.dist)\n    {\n        hit.dist = t;\n        hit.uv = uv;\n    }\n    return;\n}\n\n\n\n#define noTexture true\n\nmat3 m = mat3( 0.00, 0.90, 0.60, \n-0.90, 0.36, -0.48, \n-0.60, -0.48, 0.34 );\n\n//----------------------------------------------------------------------\nfloat hsh( float n )\n{\n  return fract(sin(n)*43758.5453123);\n}\n\n\n\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nfloat nse3d(in vec3 x)\n{\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n  f = f*f*(3.0-2.0*f);\n\n  #ifdef noTexture\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hsh(n+  0.0), hsh(n+  1.0), f.x), \n    mix( hsh(n+ 57.0), hsh(n+ 58.0), f.x), f.y), \n      mix(mix( hsh(n+113.0), hsh(n+114.0), f.x), \n      mix( hsh(n+170.0), hsh(n+171.0), f.x), f.y), f.z);\n  #else\n    vec2 uv = (p.xy + vec2(37.0, 17.0)*p.z) + f.xy;\n    vec2 rg = texture2D( texture, mod((uv+ 0.5)/256.0, 1.0), -100.0 ).yx;\n    return mix( rg.x, rg.y, f.z );  \n  #endif\n}\nfloat nse(in vec2 x)\n{\n  vec2 p = floor(x);\n  vec2 f = fract(x);\n  f = f*f*(6.0-4.0*f);\n\n  float n = p.x + p.y*57.0;\n  float res = mix(mix( hsh(n+  0.0), hsh(n+  1.0), f.x), \n  mix( hsh(n+ 57.0), hsh(n+ 58.0), f.x), f.y);\n  return res;\n}\nfloat density2(vec2 p, float z, float t)\n{\n    float v = 0.0;\n    float fq = 1.0, am = 0.5, mvfd = 1.0;\n    vec2 rnd = vec2(0.3, 0.7);\n    for(int i = 0; i < 7; i++)\n    {\n        rnd = fract(sin(rnd * 14.4982) * 2987253.28612);\n        v += nse(p * fq + t * (rnd - 0.5)) * am;\n        fq *= 2.0;\n        am *= 0.5;\n        mvfd *= 1.3;\n    }\n    return v * exp(z * z * -2.0);\n}\n\nfloat densA = 1.0, densB = 2.0;\n\nfloat fbm(vec3 p)\n{\n    vec3 q = p;\n    q.xy = rotate(p.xy, time);\n    \n    p += (nse3d(p * 3.0) - 0.5) * 0.3;\n    \n    //float v = nse3d(p) * 0.5 + nse3d(p * 2.0) * 0.25 + nse3d(p * 4.0) * 0.125 + nse3d(p * 8.0) * 0.0625;\n    \n    //p.y += time * 0.2;\n    \n    float mtn = time * 0.15;\n    \n    float v = 0.0;\n    float fq = 1.0, am = .45;\n    for(int i = 0; i < 6; i++)\n    {\n        v += nse3d(p * fq + mtn * fq) * am;\n        fq *= 2.;\n        am *= 0.5;\n    }\n    return v;\n}\n\nfloat fbmHQ(vec3 p)\n{\n    vec3 q = p;\n    q.xy = rotate(p.xy, time);\n    \n    p += (nse3d(p * 3.0) - 0.5) * 0.4;\n    \n    //float v = nse3d(p) * 0.5 + nse3d(p * 2.0) * 0.25 + nse3d(p * 4.0) * 0.125 + nse3d(p * 8.0) * 0.0625;\n    \n    //p.y += time * 0.2;\n    \n    float mtn = time * 0.2;\n    \n    float v = 0.0;\n    float fq = 1.0, am = 0.5;\n    for(int i = 0; i < 2; i++)\n    {\n        v += nse3d(p * fq + mtn * fq) * am;\n        fq *= 2.0;\n        am *= 0.5;\n    }\n    return v;\n}\n\nfloat density(vec3 p)\n{\n    vec2 pol = vec2(atan(p.y, p.x), length(p.yx));\n    \n    float v = fbm(p);\n    \n    float fo = atan((pol.y - 1.5),(pol.y - 1.5)+(densA + densB) * 0.5);\n    fo *= (densB - densA);\n    v *= exp(fo * fo * -5.0);\n    \n    float edg = .23;\n    return smoothstep(edg, edg + 0.1, v);\n}\n\n\n\n\n\nfloat hash1(float p)\n{\n\treturn fract(sin(p * 172.435) * 29572.683) - 0.5;\n}\n\nfloat hash2(vec2 p)\n{\n\tvec2 r = (456.789 * sin(789.123 * p.xy));\n\treturn fract(r.x * r.y * (1.0 + p.x));\n}\n\nfloat ns(float p)\n{\n\tfloat fr = fract(p);\n\tfloat fl = floor(p);\n\treturn mix(hash1(fl), hash1(fl + 1.0), fr);\n}\n\n\n\nvoid main(void)\n{\n\tvec3 iResolution = vec3(resolution, 1.0);\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n    \n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float camtm = time * 0.15;\n    vec3 ro = vec3(cos(camtm), 0.0, camtm);\n    vec3 rd = normalize(vec3(uv, 1.2));\n    rd.xz = rotate(rd.xz, sin(camtm) * 0.4);\n    rd.yz = rotate(rd.yz, sin(camtm * 1.3) * 0.4);\n    \n    vec3 sun = normalize(vec3(0.2, 1.0, 0.1));\n    \n    float sd = sin(gl_FragCoord.x * 0.01 + gl_FragCoord.y * 3.333333333 + time) * 1298729.146861;\n    \n    vec3 col;\n    float dacc = 0.0, lacc = 0.0;\n    \n    vec3 light = vec3(cos(time * 2.0) * 0.5, sin(time * 4.0) * 0.5, ro.z + 4.0 + sin(time));\n    \n    ITSC tunRef;\n    #define STP 12\n    for(int i = 0; i < STP; i++)\n    {\n        ITSC itsc = raycylh(ro, rd, vec3(0.0), densB + float(i) * (densA - densB) / float(STP) + fract(sd) * 0.07);\n        float d = density(itsc.p);\n        vec3 tol = light - itsc.p;\n        float dtol = length(tol);\n        tol = tol * 0.1 / dtol;\n        \n        float dl = density(itsc.p + tol);\n        lacc += max(d - dl, 0.0) * exp(dtol * -0.2);\n        dacc += d;\n        tunRef = itsc;\n    }\n    dacc /= float(STP);\n    ITSC itsc = raycylh(ro, rd, vec3(0.0), 4.0);\n    vec3 sky = vec3(0.6, 0.3, 0.2);\n    sky *= 0.2 * pow(abs(fbm(itsc.p)), 2.0);\n    lacc = max(lacc * 0.1 + 0.8, 0.0);\n    vec3 cloud = pow(abs(vec3(lacc)), vec3(0.1, 1.0, 1.0) * 1.0);\n    col = mix(sky, cloud, dacc);\n    col *= exp(tunRef.dist * -0.4);\n    \n    vec4 rnd = vec4(0.0, 1.2, 0.3, 0.4);\n\n    col = pow(abs(col), vec3(1.0, 0.8, 0.5) * 1.5) * 1.5;\n    col = pow(abs(col), vec3(1.0 / 2.2));\n\tgl_FragColor = vec4(col, 1.0);\n}\n", "user": "dd64964", "parent": "/e#23207.0", "id": "23216.2"}