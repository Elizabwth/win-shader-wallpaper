{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nconst float EPS = 0.001;\n\nvec2 onRep(vec2 p, float interval) {\n  return mod(p, interval) - interval * 0.5;\n}\n\nfloat distBar(vec2 p, float interval, float width) {\n  return length(max(abs(onRep(p, interval)) - width, 0.0));\n}\n\nfloat distTube(vec2 p, float interval, float width) {\n  return length(onRep(p, interval)) - width;\n}\n\n// distance function\nfloat distScene(vec3 p) {\n  float bar_x = distBar(p.yz, 1.0, 0.1);\n  float bar_y = distBar(p.xz, 1.0, 0.1);\n  float bar_z = distBar(p.xy, 1.0, 0.1);\n\n  float tube_x = distTube(p.yz, 0.1, 0.025);\n  float tube_y = distTube(p.xz, 0.1, 0.025);\n  float tube_z = distTube(p.xy, 0.1, 0.025);\n\n  return max(max(max(min(min(bar_x, bar_y),bar_z), -tube_x), -tube_y), -tube_z);\n}\n\nvec3 getNormal(vec3 p) {\n  return normalize(vec3(\n    distScene(p + vec3(  EPS, 0.0, 0.0)) - distScene(p + vec3( -EPS, 0.0, 0.0)),\n    distScene(p + vec3(0.0,   EPS, 0.0)) - distScene(p + vec3(0.0,  -EPS, 0.0)),\n    distScene(p + vec3(0.0, 0.0,   EPS)) - distScene(p + vec3(0.0, 0.0,  -EPS))\n  ));\n}\n\nvoid main(void) {\n  // fragment position\n  vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\n  // camera and ray\n  vec3 cPos = vec3(0.0, 0.0, time);\n  vec3 cUp  = normalize(vec3(0.1, 0.4, 0.0));\n  vec3 cDir = cross(cUp, vec3(-1.0, 0.0, 0.0));\n  vec3 cSide = cross(cDir, cUp);\n  float targetDepth = 1.0;\n  vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n  // direction light\n  vec3 lightDir = normalize(vec3(1, 1, -2));\n\n  // marching loop\n  float dist;\n  float depth = 0.0;\n  vec3 dPos = cPos;\n  for(int i = 0; i < 64; i++){\n    dist = distScene(dPos);\n    depth += dist;\n    dPos = cPos + depth * ray;\n    if (abs(dist) < EPS) break;\n  }\n\n  // hit check\n  vec3 color;\n  if (abs(dist) < EPS) {\n    vec3 normal = getNormal(dPos);\n    float diffuse = clamp(dot(lightDir, normal), 0.1, 1.0);\n    color = vec3(1.0, 0.1, 0.1) * diffuse;\n  } else {\n    color = vec3(0.0);\n  }\n  gl_FragColor = vec4(color + 0.05 * depth, 1.0);\n}", "user": "d548c24", "parent": null, "id": "29050.0"}