{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 resolution;\n\n// http://www.nrc.gov/reading-rm/doc-collections/cfr/part020/part020-1901.html\n// now more compact & without careless trig funcs (learned a bit since) \n// ...of course using angles (not baked in) meant more obvious animation hacks\n\n//comment for fast non-aa\n#define ANTIALIAS\n\nconst vec3 x = vec3(1.7320508, 0.0, 1.7320508); //sqrt(3)\nconst vec3 y = vec3(-1.0, 1.0, 1.0);\n\nfloat rad_sym_aa(vec2 uv)\n{\n\tfloat c = 1.0;\n\tfloat r = length(uv);\n\tfor (int i = 0; i < 3; ++i)\n\t\tc = abs(c - smoothstep(0.005, 0.0, dot(uv, vec2(x[i], y[i]))));\n\tc *= smoothstep(0.495, 0.5, r) - smoothstep(0.145, 0.15, r);\n\tc += 1.0 - smoothstep(0.1, 0.095, r);\n\treturn c;\n}\n\nfloat rad_sym(vec2 uv)\n{\n\tfloat c = 1.0;\n\tfloat r = length(uv);\n\tfor (int i = 0; i < 3; ++i)\n\t\tc = abs(c - step(dot(uv, vec2(x[i], y[i])), 0.0));\n\tc *= step(0.5, r) - step(0.15, r);\n\tc += 1.0 - step(r, 0.1);\n\treturn c;\n}\n\nvoid main(void)\n{\n\tvec2 uv = (gl_FragCoord.xy / resolution - vec2(0.5)) * vec2(resolution.x / resolution.y, 1.0) * 1.05;\n#ifdef ANTIALIAS\n\tfloat col = rad_sym_aa(uv);\n#else\n\tfloat col = rad_sym(uv);\n#endif\n\tgl_FragColor = vec4(col, col * 0.8, 0.0, 1.0);\n}", "user": "5698279", "parent": "/e#22211.1", "id": "27387.0"}