{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Paremeters --------------------------\n\nconst float height = 8.0;\nconst float size = 32.0;\nconst float noiseSize = 8.0;\nconst float noiseStrength = 0.25;\nconst int noiseDepth = 3;\nconst float speed = 4.0;\n\nconst vec3 color = vec3(2.5, 2.0, 1.5);\n\nconst bool followMouse = false;\nconst vec2 defaultPosition = vec2(0.5, 0.2);\n\n//--------------------------------------\n\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n// Perlin noise source code from Stefan Gustavson\n// https://github.com/ashima/webgl-noise/blob/master/src/classicnoise2D.glsl\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n\nvoid main( void ) {\n\tvec2 position = (followMouse ? mouse : defaultPosition) * resolution.xy;\n\t\n\t// Compute flame area\n\tvec2 coord;\n\tif (gl_FragCoord.y > position.y) {\n\t\tcoord = vec2(gl_FragCoord.x, position.y + (gl_FragCoord.y - position.y) / height);\n\t} else {\n\t\tcoord = gl_FragCoord.xy;\n\t}\n\tfloat dist = distance(position, coord) / resolution.y;\n\t\n\t// Compute flame noise\n\tvec2 noisePosition = noiseSize * (gl_FragCoord.xy - position) / resolution.y - vec2(0.0, speed * time);\n\tfloat noise = 0.0;\n\tfor (int i = 0; i < noiseDepth; i++) {\n\t\tnoise += cnoise(noisePosition * pow(2.0, float(i)));\n\t}\n\t\n\tgl_FragColor = vec4(mix(-size * dist, noise, noiseStrength) + color, 1.0);\n}", "user": "b58ecec", "parent": "/e#10180.1", "id": "10184.48"}