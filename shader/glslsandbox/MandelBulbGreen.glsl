{"code": "\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n//kanatacrude - bit less seasickness from camera movement\n\t\nuniform float time;\nuniform vec2 resolution;\n\nfloat t;\nfloat t2;\n\nfloat map(vec3 p)\n{\n    const int MAX_ITER = 10;\n    const float BAILOUT=4.0;\n    float Power=6.0;\n\n    vec3 v = p;\n    vec3 c = v;\n\n    float r=0.0;\n    float d=1.0;\n    for(int n=0; n<=MAX_ITER; ++n)\n    {\n        r = length(v);\n        if(r>BAILOUT) break;\n\n        float theta = acos(v.z/r) + sin(t);\n        float phi = atan(v.y, v.x);\n        d = pow(r,Power-1.2)*Power*d+1.1 + sin(t);\n\n        float zr = pow(r,Power);\n        theta = theta*Power;\n        phi = phi*Power;\n        v = (vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta))*zr)+c;\n    }\n    return 0.5*log(r)*r/d;\n}\n\n\nvoid main( void )\n{\n    t = time * 1.1;\n    t2 = time * 0.3;\n\n    vec2 pos = (gl_FragCoord.xy*2.0 - resolution.xy) / resolution.y;\n    vec3 camPos = vec3(cos(t2*0.3+t2), sin(t2*0.3-t2), 2.-sin(t2*.2)/2.);\n    vec3 camTarget = vec3(0.0, 0.0, 0.0);\n\n    vec3 camDir = normalize(camTarget-camPos);\n    vec3 camUp  = normalize(vec3(0.0, 1.0, 0.8));\n    vec3 camSide = cross(camDir, camUp);\n    float focus = 1.8;\n\n    vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*focus);\n    vec3 ray = camPos;\n    float m = 0.0;\n    float d = 0.0, total_d = 0.0;\n    const int MAX_MARCH = 3000;\n    const float MAX_DISTANCE = 20009.0;\n    for(int i=0; i<MAX_MARCH; ++i) {\n        d = map(ray);\n        total_d += d;\n        ray += rayDir * d;\n        m += 1.0;\n        if(d<0.001) { break; }\n        if(total_d>MAX_DISTANCE) { total_d=MAX_DISTANCE; break; }\n    }\n\n    float c = (total_d)*0.0001;\n    vec4 result = vec4( 1.0-vec3(c, c, c) - vec3(0.1024576534223, 0.02506, 0.2532)*m*0.8, 1.0 );\n    gl_FragColor = result;\n}\n", "user": "9087402", "parent": "/e#7422.0", "id": "7462.1"}