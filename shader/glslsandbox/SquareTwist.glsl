{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nuniform sampler2D bb;\n\n//twist\n\n//Code by: fb39ca4. On Shadertoy\n//https://www.shadertoy.com/view/XsXXDH\n\n//Inspired by Matthew DiVito's gifs\n//http://cargocollective.com/matthewdivito/Animated-Gifs-02\n\n\n//Now I challange you to fork this shader with filter gradient and blur.\n//http://payload71.cargocollective.com/1/3/111325/3721505/twist.gif\n\n// \tIs it good now ? (Sorry I didn't do things very cleanly )\n//\t\t\t\t\t\t\t(kloumpt)\n\n\n\nconst float PI = 3.14159265;\n\nvec2 rotate(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA); \t\n}\n\nfloat square(vec2 uv, float d) {\n\treturn max(abs(uv.x), abs(uv.y)) - d;\t\n}\n\nfloat smootheststep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0) * 3.14159265;\n    return 0.5 - (cos(x) * 0.5);\n}\nvec3 getColorFromTime( float time)\n{\n\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tuv = uv * 2.5 - 1.0;\n\tuv.x *= resolution.x / resolution.y;\n\tuv *= 1.125;\n\tuv /= 1.667;\n    \tfloat blurAmount = -0.067 * 200.0 / resolution.x;\n    \n\tfloat btime = mod(time, 1.0);\n\tbtime = smootheststep(0.1, 1.111,  btime);\n\t\n\tvec3 returnVal = vec3(.0);\n\t\n\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\tfor (int i = 0; i < 22; i++) {\n\t\tfloat n = float(i);\n\t\tfloat size = 1.111 - n / 13.0;\n\t\tfloat rotateAmount = (n * 0.5 + 0.125) * PI * 0.5; \n\t\treturnVal = mix(returnVal, vec3(1.0), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * btime), size)));\n\t\tfloat blackOffset = mix(1.0 / 4.0, 1.0 / 2.0, n / 9.0) / 9.0;\n\t\treturnVal = mix(returnVal, vec3(0.0), smoothstep(0.0, blurAmount, square(rotate(uv, -(rotateAmount + PI / 2.0) * btime), size - blackOffset)));\n    }\nreturn returnVal;\n}\n\nvoid main( void ) {\n\tfloat period = 3.333;\n\tfloat btime = mod(cos(time),sqrt(time)) / period;\n\t\tbtime /= pow(sin(time),inversesqrt(time)) / period;\n\tvec3 mainVal \t= getColorFromTime(mod((btime*0.01),sqrt(time/btime)));\n\tvec3 SecondVal \t= getColorFromTime(btime -.125);\n\tvec3 ThirdVal \t= getColorFromTime(-btime +.025);\n\tvec3 FirstMixInter = mix( SecondVal, ThirdVal, .125);\n\tvec3 SecondMixInter =  mix( SecondVal, ThirdVal, .333);\n\t\n\tvec3 FirstMix = mix ( mainVal, FirstMixInter, .125 );\n\tvec3 SecondMix = refract ( mainVal, SecondMixInter, .333 );\n\t\n\tvec2 uv = gl_FragCoord.xy/vec2(resolution.x*1.667,resolution.y*0.5);\n\t     uv += gl_FragCoord.xx/(resolution.xx*1.95);\n\t     uv -= gl_FragCoord.yy/(resolution.yy*1.125);\n\tgl_FragColor.rgb = SecondMixInter;\n\tgl_FragColor = vec4( gl_FragColor.r, mix (mainVal, mix( SecondVal, ThirdVal, .25), .30 ).x, gl_FragColor.b, 1.);\n\tvec4 blurColor = texture2D(bb, uv); \n\tblurColor.r = 0.075; \n\tblurColor.g = 0.067; \n\tgl_FragColor = mix(gl_FragColor, blurColor, (1.-max(gl_FragColor.r, max(gl_FragColor.g, gl_FragColor.b)))*distance(uv, vec2(.5))*1.5);\n\tgl_FragColor.bg*=.125+.5*distance(uv, vec2(0.3, 0.5));\n\tgl_FragColor.r*=.5+.67*distance(uv, vec2(0.3, 0.125));\n\tgl_FragColor.b*=.67+.5*distance(uv, vec2(0.2, 0.677));\n}", "user": "51af143", "parent": "/e#24622.1", "id": "26562.2"}