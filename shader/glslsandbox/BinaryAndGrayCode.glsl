{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n//more binary and gray code stuff - woo!\n\n//mouse left  : binary\n//mouse right : gray code\n\n//red   > .5\n//blue  < .5\n//green = .5\n\n//working out relationships in floating points w/o bitops\n//anything below .5 is considered a 1.\n//values above .5 shoot to infinity pretty quick (the red stuff)\n\n\n//text display functions\nfloat extract_bit(float n, float b);\nfloat sprite(float n, vec2 s, vec2 p);\nfloat digit(float n, vec2 s, vec2 p);\n\t\n//characters \nfloat c_0 = 31599.;\nfloat c_1 =  9362.;\nfloat c_2 = 29671.;\nfloat c_3 = 29391.;\nfloat c_4 = 23497.;\nfloat c_5 = 31183.;\nfloat c_6 = 31215.;\nfloat c_7 = 29257.;\nfloat c_8 = 31727.;\nfloat c_9 = 31695.;\n\n\nvoid main( void ) \n{\n\t////\n\t//display formatting\n\t////\n\tvec2 uv \t= gl_FragCoord.xy/resolution.xy;\n\tvec2 scale\t= vec2(64., 32.);\n\tvec2 offset\t= vec2(-48., 0.);\t\n\tvec2 position\t= floor(uv * scale + offset);\t\n\t\n\t\n\t\n\t////\n\t//code creation stuff\n\t//\n\t//anything resulting from the code function that's <= .5 counts as a 1, otherwise the position is a 0\n\t//just made this stuff up to draw the picture - seems to work - not sure why\n\t//really looks like it could be refactored (see: extract_bit below) but drawing them like this is nice too\n\t////\n\t\n\tfloat number \t= clamp(floor(position.y + clamp(mouse.y * 255., 0., 256. - scale.y)), 0., 255.);\n\tfloat exponent\t= floor(position.x);\t\n\tfloat f \t= mouse.x < .5 ? 1. : 2.; //this would prolly be a different whatever \"f\" is once this gets refactored\n\tf\t \t= mouse.x < .0125 || mouse .x > .975? abs(fract(time*.0125)-.5)*2.+1. : f; //fun blinky lights\n\tfloat code \t= .5/(mod(number + pow(f, exponent) + f-2., pow(2., exponent + f))/pow(2., exponent)/f);\n\t\n\tcode = floor(code*256.)/256.;\n\t\n\t\n\t\n\t////\n\t//everything beyond this is just display\n\t////\n\tfloat code_high    \t= float(code > .5);\n\tfloat code_half     \t= float(code == .5);\n\tfloat code_low     \t= float(code < .5);\n\tfloat code_floor\t= float(code <= .5);\n\t\n\t\t\n\t//setup text \n\tvec2 sprite_scale\t= vec2(3., 5.);\t\t\n\tvec2 char_scale\t\t= vec2(4., 8.);\n\tvec2 char_position \t= (vec2(uv.x, clamp(uv.y + floor(mouse.y * 192.), 0., 255.)) * scale + offset) * char_scale;\n\tchar_position.y\t \t= mod(char_position.y, char_scale.y) - 1.;\n\n\t\n\t//write base 10 digits\n\tvec2 decimal_value\t= vec2(number, char_position.y);\n\tfloat decimal_digits \t= 0.;\n\tdecimal_digits\t\t+= digit(decimal_value.x/100., sprite_scale, char_position - vec2(-12., 0.));\n\tdecimal_digits\t\t+= digit( decimal_value.x/10., sprite_scale, char_position - vec2(-8., 0.));\n\tdecimal_digits\t\t+= digit(     decimal_value.x, sprite_scale, char_position - vec2( -4., 0.));\n\t\n\t\n\t//write binary digits\n\tchar_position.x\t \t= mod(char_position.x, char_scale.x);\n\tfloat code_bit_char\t= code_floor == 0. ? c_0 : c_1;\n\tfloat code_digits\t= sprite(code_bit_char, vec2(3., 5.), char_position);\n\tfloat code_digits_mask\t= float(position.x > -1. && position.x < 8.);\t\n\t\n\t\n\t//composite results\n\tvec4 result \t\t= vec4(0.,0.,0.,1.);\n\tresult \t\t\t+= code_floor * .5;\n\tresult\t\t\t= mouse.x < .25 || mouse.x > .75 ? result * .5 + .5 * (vec4(code_high, code_half, code_low, 1.)) : result;\n\tresult \t\t\t+= code_digits * .125;\n\tresult \t\t\t*= code_digits_mask;\n\tresult \t\t\t+= decimal_digits;\n\t\t\n\n\tgl_FragColor = result;\n}//sphinx\n\n\nfloat extract_bit(float n, float b)\n{\n\tn = floor(n);\n\tb = floor(b);\n\tb = floor(n/pow(2.,b));\n\treturn float(mod(b,2.) == 1.);\n}\n\n\nfloat sprite(float n, vec2 s, vec2 p)\n{\n\tp = floor(p);\n\tfloat bounds = float(all(lessThan(p,s)) && all(greaterThanEqual(p,vec2(0,0))));\n\treturn extract_bit(n,(2.0 - p.x) + 3.0 * p.y) * bounds;\n}\n\n\nfloat digit(float num, vec2 s, vec2 p)\n{\n\tnum = mod(floor(num),10.0);\n\t\n\tif(num == 0.0) return sprite(c_0, s, p);\n\tif(num == 1.0) return sprite(c_1, s, p);\n\tif(num == 2.0) return sprite(c_2, s, p);\n\tif(num == 3.0) return sprite(c_3, s, p);\n\tif(num == 4.0) return sprite(c_4, s, p);\n\tif(num == 5.0) return sprite(c_5, s, p);\n\tif(num == 6.0) return sprite(c_6, s, p);\n\tif(num == 7.0) return sprite(c_7, s, p);\n\tif(num == 8.0) return sprite(c_8, s, p);\n\tif(num == 9.0) return sprite(c_9, s, p);\n\t\n\treturn 0.0;\n}", "user": "a1eb699", "parent": null, "id": "27279.4"}