{"code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define CHAR_SIZE vec2(6, 7)\n#define CHAR_SPACING vec2(6, 9)\n\n#define DOWN_SCALE 2.0\n\nvec2 res;\nvec2 start_pos = vec2(0);\nvec2 print_pos = vec2(0);\nvec2 print_pos_pre_move = vec2(0);\nvec3 text_color = vec3(1);\n\n/*\nTop left pixel is the most significant bit.\nBottom right pixel is the least significant bit.\n\n \u2588\u2588\u2588  |\n\u2588   \u2588 |\n\u2588   \u2588 |  \n\u2588   \u2588 |\n\u2588\u2588\u2588\u2588\u2588 |\n\u2588   \u2588 |\n\u2588   \u2588 |\n\n011100 \n100010\n100010  \n100010\n111110\n100010\n100010\n\n011100 (upper 21 bits)\n100010 -> 011100 100010 100010 100 -> 935188\n100010  \n100\n   010 (lower 21 bits)\n111110 -> 010 111110 100010 100010 -> 780450\n100010\n100010\n\nvec2(935188.0,780450.0)\n*/\n\n//Text coloring\n#define HEX(i) text_color = mod(vec3(i / 65536,i / 256,i),vec3(256.0))/255.0;\n#define RGB(r,g,b) text_color = vec3(r,g,b);\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n#define BEGIN_TEXT(x,y) print_pos = floor(vec2(x,y)); start_pos = floor(vec2(x,y));\n\n//Automatically generated from the sprite sheet here: http://uzebox.org/wiki/index.php?title=File:Font6x8.png\n#define _ col+=char(vec2(0.0,0.0),uv);\n#define _spc col+=char(vec2(0.0,0.0),uv)*text_color;\n#define _exc col+=char(vec2(276705.0,32776.0),uv)*text_color;\n#define _quo col+=char(vec2(1797408.0,0.0),uv)*text_color;\n#define _hsh col+=char(vec2(10738.0,1134484.0),uv)*text_color;\n#define _dol col+=char(vec2(538883.0,19976.0),uv)*text_color;\n#define _pct col+=char(vec2(1664033.0,68006.0),uv)*text_color;\n#define _amp col+=char(vec2(545090.0,174362.0),uv)*text_color;\n#define _apo col+=char(vec2(798848.0,0.0),uv)*text_color;\n#define _lbr col+=char(vec2(270466.0,66568.0),uv)*text_color;\n#define _rbr col+=char(vec2(528449.0,33296.0),uv)*text_color;\n#define _ast col+=char(vec2(10471.0,1688832.0),uv)*text_color;\n#define _crs col+=char(vec2(4167.0,1606144.0),uv)*text_color;\n#define _per col+=char(vec2(0.0,1560.0),uv)*text_color;\n#define _dsh col+=char(vec2(7.0,1572864.0),uv)*text_color;\n#define _com col+=char(vec2(0.0,1544.0),uv)*text_color;\n#define _lsl col+=char(vec2(1057.0,67584.0),uv)*text_color;\n#define _0 col+=char(vec2(935221.0,731292.0),uv)*text_color;\n#define _1 col+=char(vec2(274497.0,33308.0),uv)*text_color;\n#define _2 col+=char(vec2(934929.0,1116222.0),uv)*text_color;\n#define _3 col+=char(vec2(934931.0,1058972.0),uv)*text_color;\n#define _4 col+=char(vec2(137380.0,1302788.0),uv)*text_color;\n#define _5 col+=char(vec2(2048263.0,1058972.0),uv)*text_color;\n#define _6 col+=char(vec2(401671.0,1190044.0),uv)*text_color;\n#define _7 col+=char(vec2(2032673.0,66576.0),uv)*text_color;\n#define _8 col+=char(vec2(935187.0,1190044.0),uv)*text_color;\n#define _9 col+=char(vec2(935187.0,1581336.0),uv)*text_color;\n#define _col col+=char(vec2(195.0,1560.0),uv)*text_color;\n#define _scl col+=char(vec2(195.0,1544.0),uv)*text_color;\n#define _les col+=char(vec2(135300.0,66052.0),uv)*text_color;\n#define _equ col+=char(vec2(496.0,3968.0),uv)*text_color;\n#define _grt col+=char(vec2(528416.0,541200.0),uv)*text_color;\n#define _que col+=char(vec2(934929.0,1081352.0),uv)*text_color;\n#define _ats col+=char(vec2(935285.0,714780.0),uv)*text_color;\n#define _A col+=char(vec2(935188.0,780450.0),uv)*text_color;\n#define _B col+=char(vec2(1983767.0,1190076.0),uv)*text_color;\n#define _C col+=char(vec2(935172.0,133276.0),uv)*text_color;\n#define _D col+=char(vec2(1983764.0,665788.0),uv)*text_color;\n#define _E col+=char(vec2(2048263.0,1181758.0),uv)*text_color;\n#define _F col+=char(vec2(2048263.0,1181728.0),uv)*text_color;\n#define _G col+=char(vec2(935173.0,1714334.0),uv)*text_color;\n#define _H col+=char(vec2(1131799.0,1714338.0),uv)*text_color;\n#define _I col+=char(vec2(921665.0,33308.0),uv)*text_color;\n#define _J col+=char(vec2(66576.0,665756.0),uv)*text_color;\n#define _K col+=char(vec2(1132870.0,166178.0),uv)*text_color;\n#define _L col+=char(vec2(1065220.0,133182.0),uv)*text_color;\n#define _M col+=char(vec2(1142100.0,665762.0),uv)*text_color;\n#define _N col+=char(vec2(1140052.0,1714338.0),uv)*text_color;\n#define _O col+=char(vec2(935188.0,665756.0),uv)*text_color;\n#define _P col+=char(vec2(1983767.0,1181728.0),uv)*text_color;\n#define _Q col+=char(vec2(935188.0,698650.0),uv)*text_color;\n#define _R col+=char(vec2(1983767.0,1198242.0),uv)*text_color;\n#define _S col+=char(vec2(935171.0,1058972.0),uv)*text_color;\n#define _T col+=char(vec2(2035777.0,33288.0),uv)*text_color;\n#define _U col+=char(vec2(1131796.0,665756.0),uv)*text_color;\n#define _V col+=char(vec2(1131796.0,664840.0),uv)*text_color;\n#define _W col+=char(vec2(1131861.0,699028.0),uv)*text_color;\n#define _X col+=char(vec2(1131681.0,84130.0),uv)*text_color;\n#define _Y col+=char(vec2(1131794.0,1081864.0),uv)*text_color;\n#define _Z col+=char(vec2(1968194.0,133180.0),uv)*text_color;\n#define _lsb col+=char(vec2(925826.0,66588.0),uv)*text_color;\n#define _rsl col+=char(vec2(16513.0,16512.0),uv)*text_color;\n#define _rsb col+=char(vec2(919584.0,1065244.0),uv)*text_color;\n#define _pow col+=char(vec2(272656.0,0.0),uv)*text_color;\n#define _usc col+=char(vec2(0.0,62.0),uv)*text_color;\n#define _a col+=char(vec2(224.0,649374.0),uv)*text_color;\n#define _b col+=char(vec2(1065444.0,665788.0),uv)*text_color;\n#define _c col+=char(vec2(228.0,657564.0),uv)*text_color;\n#define _d col+=char(vec2(66804.0,665758.0),uv)*text_color;\n#define _e col+=char(vec2(228.0,772124.0),uv)*text_color;\n#define _f col+=char(vec2(401543.0,1115152.0),uv)*text_color;\n#define _g col+=char(vec2(244.0,665474.0),uv)*text_color;\n#define _h col+=char(vec2(1065444.0,665762.0),uv)*text_color;\n#define _i col+=char(vec2(262209.0,33292.0),uv)*text_color;\n#define _j col+=char(vec2(131168.0,1066252.0),uv)*text_color;\n#define _k col+=char(vec2(1065253.0,199204.0),uv)*text_color;\n#define _l col+=char(vec2(266305.0,33292.0),uv)*text_color;\n#define _m col+=char(vec2(421.0,698530.0),uv)*text_color;\n#define _n col+=char(vec2(452.0,1198372.0),uv)*text_color;\n#define _o col+=char(vec2(228.0,665756.0),uv)*text_color;\n#define _p col+=char(vec2(484.0,667424.0),uv)*text_color;\n#define _q col+=char(vec2(244.0,665474.0),uv)*text_color;\n#define _r col+=char(vec2(354.0,590904.0),uv)*text_color;\n#define _s col+=char(vec2(228.0,114844.0),uv)*text_color;\n#define _t col+=char(vec2(8674.0,66824.0),uv)*text_color;\n#define _u col+=char(vec2(292.0,1198868.0),uv)*text_color;\n#define _v col+=char(vec2(276.0,664840.0),uv)*text_color;\n#define _w col+=char(vec2(276.0,700308.0),uv)*text_color;\n#define _x col+=char(vec2(292.0,1149220.0),uv)*text_color;\n#define _y col+=char(vec2(292.0,1163824.0),uv)*text_color;\n#define _z col+=char(vec2(480.0,1148988.0),uv)*text_color;\n#define _lpa col+=char(vec2(401542.0,66572.0),uv)*text_color;\n#define _bar col+=char(vec2(266304.0,33288.0),uv)*text_color;\n#define _rpa col+=char(vec2(788512.0,1589528.0),uv)*text_color;\n#define _tid col+=char(vec2(675840.0,0.0),uv)*text_color;\n#define _lar col+=char(vec2(8387.0,1147904.0),uv)*text_color;\n#define _nl print_pos = start_pos - vec2(0,CHAR_SPACING.y);\n\n//Extracts bit b from the given number.\nfloat extract_bit(float n, float b)\n{\n\tb = clamp(b,-1.0,22.0);\n\treturn floor(mod(floor(n / pow(2.0,floor(b))),2.0));   \n}\n\n//Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(vec2 spr, vec2 size, vec2 uv)\n{\n\tuv = floor(uv);\n\tfloat bit = (size.x-uv.x-1.0) + uv.y * size.x;  \n\tbool bounds = all(greaterThanEqual(uv,vec2(0)))&& all(lessThan(uv,size)); \n\treturn bounds ? extract_bit(spr.x, bit - 21.0) + extract_bit(spr.y, bit) : 0.0;\n}\n\n//Prints a character and moves the print position forward by 1 character width.\nvec3 char(vec2 ch, vec2 uv)\n{\n\tfloat px = sprite(ch, CHAR_SIZE, uv - print_pos);\n\tprint_pos.x += CHAR_SPACING.x;\n\treturn vec3(px);\n}\n\n\nvec3 Text(vec2 uv)\n{\n    \tvec3 col = vec3(0.0);\n    \t\n    \tvec2 center_pos = vec2(res.x/2.0 - STRWIDTH(20.0)/2.0,res.y/2.0 - STRHEIGHT(1.0)/2.0);\n       \t\n    \tBEGIN_TEXT(center_pos.x,center_pos.y)\n\tHEX(0xFF0000) _H _e _l _l _o _com _ HEX(0x00FF00) _G _L _S _L _ HEX(0x00FFFF) _S _a _n _d _b _o _x _exc\n\t\n\tBEGIN_TEXT(res.x/2.0-STRWIDTH(11.0)/2.0,res.y/2.0)\n\tprint_pos += vec2(cos(time)*96.,sin(time)*96.);\n\t\n\tRGB(1,0,0) _M RGB(1,.5,0)_o RGB(1,1,0)_v RGB(0,1,0)_i RGB(0,.5,1)_n RGB(0.5,0,1)_g _ RGB(1,0,0)_T RGB(1,.5,0)_e RGB(1,1,0)_x RGB(0,1,0)_t\n    \n    \treturn col;\n}\n\nvoid main( void )\n{\n\tvec2 uv = gl_FragCoord.xy / DOWN_SCALE;\n\tvec2 duv = floor(gl_FragCoord.xy / DOWN_SCALE);\n\tres = resolution.xy / DOWN_SCALE;\n    \n\tvec3 pixel = Text(duv);\n    \n\tvec3 col = pixel*0.9+0.1;\n\tcol *= (1.-distance(mod(uv,vec2(1.0)),vec2(0.65)))*1.2;\n\t\n\tgl_FragColor = vec4(vec3(col), 1.0);\n}", "user": "17d0a73", "parent": null, "id": "24076.1"}