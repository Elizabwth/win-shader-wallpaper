{"code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n//The Worst Demo\n//16 x 24 x 1 bpp sprite test brought to you by comic sans\n\n#define IS_THUMBNAIL (resolution.xy == vec2(200,100))\n\nfloat tau = atan(1.0)*8.0;\n\nfloat repeatTime = 3.8;\nfloat zoomTime = 1.0;\nfloat spinTime = 7.0;\nfloat colorTime = 7.0;\n\nfloat animTime = 0.0;\n\nfloat zoom = 1.0;\nfloat ang = 0.0;\nbool doRepeat = false;\nbool doColor = false;\nvec3 fg = vec3(1);\nvec3 bg = vec3(0);\n\n#define SCALE 1.0\n\nvec2 size = vec2(16,24);\n\n#define STRSIZE(n) (n * size)\n\nmat4 c_g = mat4(0x000000, 0x000000, 0x01E007, 0xF80FFC, 0x1E1C3C, 0x003800, 0x780070, 0x0070FF, 0xE7FFEF, 0xFFEF0E, 0xE01EE0, 0x1CE03C, 0xF0F87F, 0xF03FE0, 0x1F8000, 0x000000);\nmat4 c_l = mat4(0x000000, 0x000000, 0x100038, 0x003800, 0x380038, 0x003800, 0x380038, 0x003800, 0x380038, 0x003800, 0x380038, 0x003800, 0x38783F, 0xFC3FF8, 0x1FC000, 0x000000);\nmat4 c_s = mat4(0x000000, 0x000000, 0x01F807, 0xFE0FFE, 0x1E003C, 0x003800, 0x3C003F, 0xF01FFC, 0x07FE00, 0x0F0007, 0x0007E0, 0x07E00F, 0xF07EFF, 0xFC7FF8, 0x1FC000, 0x000000);\n\n//Extracts 4 bits from 4 numbers at once.\nvec4 extract_bit(vec4 n, vec4 b)\n{\n\tb = clamp(b,vec4(-1.0),vec4(24.0));\n\treturn mod(floor(n / exp2(floor(b))),vec4(2.0));   \n}\n\n//Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(mat4 spr, vec2 size, vec2 uv)\n{\n\tuv = floor(uv);\n\t\n\t//Calculate the bit to extract (x + y * width) (flipped on x-axis)\n\tfloat bit = (size.x-uv.x-1.0) + uv.y * size.x;\n\t\n\t//Clipping bound to remove garbage outside the sprite's boundaries.\n\tbool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));\n\t\n\tfloat pixels = 0.0;\n\tpixels += dot(extract_bit(spr[3], bit - (vec4(72,48,24,0) +   0.0)), vec4(1));\n\tpixels += dot(extract_bit(spr[2], bit - (vec4(72,48,24,0) +  96.0)), vec4(1));\n\tpixels += dot(extract_bit(spr[1], bit - (vec4(72,48,24,0) + 192.0)), vec4(1));\n\tpixels += dot(extract_bit(spr[0], bit - (vec4(72,48,24,0) + 288.0)), vec4(1));\n\t\n\treturn bounds ? pixels : 0.0;\n}\n\nfloat hash( vec2 p )\n{\n     mat2 m = mat2( 15.32, 83.43,\n                     117.38, 289.59 );\n    \n     return dot(fract( sin( m * p) * 46783.289 ),vec2(1));\n}\n\nvec3 hue(float x)\n{\n\treturn clamp(2.0 * cos(vec3(tau * x) + (tau * vec3(0,2,1) / 3.0)),-1.0, 1.0) * 0.5 + 0.5;\n}\n\nvoid main( void ) \n{\n\tif(!IS_THUMBNAIL)\n\t{\n\t\tanimTime = max(0.0, time - zoomTime);\n\t\tzoom = sin(animTime + tau*(3.0/4.0)) * 3.0 + 4.0;\n\t\t\n\t\tanimTime = max(0.0, time - spinTime);\n\t\tang = animTime;\n\t\t\n\t\tdoRepeat = time > repeatTime;\n\t\t\n\t\tdoColor = time > colorTime;\n\t}\n\t\n\tvec2 res = resolution / SCALE / zoom;\n\tvec2 uv = floor( gl_FragCoord.xy / SCALE ) / zoom;\n\t\n\tuv -= (res / 2.0);\n\t\n\tuv *= mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\n\tuv += (STRSIZE(vec2(4,1)) / 2.0);\n\t\n\tvec2 tile = vec2(0);\n\t\n\tif(doRepeat)\n\t{\n\t\ttile = floor((uv + size/2.0) / (size * vec2(5,2)));\n\t\tuv = mod(uv, size * vec2(5,2));\n\t}\n\t\n\tvec2 cursor = vec2(0,0);\n\t\n\tfloat pixel = 0.0;\n\tpixel += sprite(c_g, size, uv - cursor); cursor.x += size.x;\n\tpixel += sprite(c_l, size, uv - cursor); cursor.x += size.x;\n\tpixel += sprite(c_s, size, uv - cursor); cursor.x += size.x;\n\tpixel += sprite(c_l, size, uv - cursor); cursor.x += size.x;\n\t\n\tif(doColor)\n\t{\n\t\tfloat c = hash(vec2(tile));\n\t\t\n\t\tfg = hue(c);\n\t\tbg = hue(c + 0.3);\n\t}\n\t\n\tvec3 color = mix(bg, fg, pixel); \n\t\n\tgl_FragColor = vec4( vec3( color ), 1.0 );\n\n}", "user": "a8250a4", "parent": null, "id": "27512.36"}