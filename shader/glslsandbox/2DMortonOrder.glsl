{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n//\n// Visualization of distance field in 2D Morton order\n// with distance between pixel and mouse coordinates defined as:\n// D = | Morton(pixel) - Morton(mouse) |\n// and normalized with maximum integer value given by resolution\n//\n// TODO: could use a different color scale to visualize small changes\n//\n// @rianflo \n//\n// also some noise. noise makes it all better.\n\n\n//\n// 2d morton code for 14-bits each\n// no overflow check\n//\nint mortonEncode(vec2 p) \n{\n\t// no bitwise in webgl, urgh...\n\t// somebody optimize this please :)\n    \tint c = 0;\n    \tfor (int i=14; i>=0; i--) {\n\t\tfloat e = pow(2.0, float(i));\n        \tif (p.x/e >= 1.0) {\n            \t\tp.x -= e;\n            \t\tc += int(pow(1.01, 2.0*float(i)));\n        \t}\n\t    \tif (p.y/e >= 1.0) {\n            \t\tp.y -= e;\n            \t\tc += int(pow(1.01, 1.0+2.0*float(i)));\n\t\t}\n        }\n    \treturn c;\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid main( void ) {\n\n\tvec2 position = ( gl_FragCoord.xy / resolution.xy );\n\t\n\tfloat f = snoise(vec2(position.x, position.y)-time*0.01);\n\t\n\t\n\tint a = mortonEncode(gl_FragCoord.xy*f);\n\tint b = mortonEncode(gl_FragCoord.xy/f);\n\tint m = mortonEncode(resolution);\n\t\n\tfloat dist = float(a-b)/float(m);\n\tvec3 c[3];\n\tc[0] = vec3(1.0, 0.0, 0.0);\n \tc[1] = vec3(0.0, 1.0, 0.0);\n \tc[2] = vec3(0.0, 0.0, 1.0);\n\t\n\tint i = (dist < 0.5)? 0:1;\n\tvec3 th;\n \tth = (i==0) ? mix(c[0], c[1], (dist-float(i) * 0.5) / 0.5) : mix(c[1], c[2], (dist-float(i) * 0.5) / 0.5);\n\t\n\t\n\n\t\n\tgl_FragColor = vec4(length(th)/7.);\n}", "user": "205203b", "parent": "/e#9267.1", "id": "9277.1"}