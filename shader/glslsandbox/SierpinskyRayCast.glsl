{"code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define MAX_ITER 20.0\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n\nfloat DE(vec3 z){\n\tz = rotationMatrix(normalize(vec3(1.0, 1.0, 0.)), time/10.) * z;\n\t    float r;\n\n\t//    float s = 2. + sin(time)/2. + (texture2D(audio_time, vec2(length(z)/3., 0.0)).a - 0.5)/2.;\n\t    int iter = 0;\n\tfloat s = 2.0;\n\t    for( int n = 0 ; n < 10; n ++ ) { \n\t       if(z.x+z.y<0.) z.xy = -z.yx; // fold 1\n\t       if(z.x+z.z<0.) z.xz = -z.zx; // fold 2\n\t       if(z.y+z.z<0.) z.zy = -z.yz; // fold 3\t\n\t       z = z*s - 1.*(s-1.0);\n\t       iter++;\n\t    }\n\n\t    return (length(z) ) * pow(s, -float(iter));\n}\n\n\nvec3 gradient(vec3 p) {\n\tvec2 e = vec2(0., 0.01);\n\n\treturn normalize( \n\t\tvec3(\n\t\t\tDE(p+e.yxx) - DE(p-e.yxx),\n\t\t\tDE(p+e.xyx) - DE(p-e.xyx),\n\t\t\tDE(p+e.xxy) - DE(p-e.xxy)\n\t\t)\n\t);\n}\t\t\t\nvoid main( void ) {\n\t\n\tvec2 uv = 2. * ((gl_FragCoord.xy ) / resolution  - 0.5);\n\n\t\n \tvec3 camera = vec3(0.,0.,-2.);\n\tvec3 point;\n\tbool hit = false;\n\tfloat thresh = 0.01;\n\tvec3 ray = normalize( vec3(uv , 1.0) );\n\t\n\t// raycasting parameter\n \tfloat t = 0.;\n \tfloat iter = 0.;\n\n\tfor(float i = 0.0; i < MAX_ITER; i++) {\n\n\t\tpoint = camera + ray * t;\n\t\tfloat dist = DE(point);\n\t\n\t\tif (abs(dist) < thresh)\n\t\t    break;\n\t\t\n\t\tt += dist;\n\t\titer ++;\n\t    }\n\tfloat shade = dot(ray, -gradient(point));\n\tvec3 color = vec3(1., 0., 1.)* shade;\n\t// // vignette\n\tcolor *= (1. - length(uv));\n\tcolor *= exp(1. - (abs(point.z - camera.z)));\n\tcolor *= exp(iter/MAX_ITER);\n\t\n\tgl_FragColor = vec4(color, 1.0 );\n\n}", "user": "783219b", "parent": "/e#27512.10", "id": "27518.1"}