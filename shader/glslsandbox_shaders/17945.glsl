{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n// srtuss, 2014\n// Ported from www.shadertoy.com\n\n#define PI 3.1415926535897932384626433832795\n\n#define ITER 20\n\nvec2 rotate(vec2 p, float a)\n\t{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n\t}\n\nvec2 circuit(vec2 p)\n\t{\n\tp = fract(p);\n\tfloat r = 0.223;\n\tfloat v = 0.0, g = 0.0;\n\tfloat test = 0.0;\n\tr = fract(r * 9184.928);\n\tfloat cp, d;\n\t\n\td = p.x;\n\tg += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n\td = p.y;\n\tg += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n\td = p.x - 1.0;\n\tg += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n\td = p.y - 1.0;\n\tg += pow(clamp(1.0 - abs(d), 0.0, 1.0), 10000.0);\n\t\n\tfor(int i = 0; i < ITER; i ++)\n\t\t{\n\t\tcp = 0.5 + (r - 0.5) * 0.9;\n\t\td = p.x - cp;\n\t\tg += pow(clamp(1.0 - abs(d), 0.0, 1.0), 160.0);\n\t\tif(d > 0.0)\n\t\t\t{\n\t\t\tr = fract(r * 4829.013);\n\t\t\tp.x = (p.x - cp) / (1.0 - cp);\n\t\t\tv += 1.0;\n\t\t\ttest = r;\n\t\t\t}\n\t\telse\n\t\t\t{\n\t\t\tr = fract(r * 1239.528);\n\t\t\tp.x = p.x / cp;\n\t\t\ttest = r;\n\t\t\t}\n\t\tp = p.yx;\n\t\t}\n\tv /= float(ITER);\n\treturn vec2(v, g);\n\t}\n\nfloat box(vec2 p, vec2 b, float r)\n\t{\n\treturn length(max(abs(p) - b, 0.0)) -r ;\n\t}\n\nfloat rand(float p)\n\t{\n\treturn fract(sin(p * 591.32) * 43758.5357);\n\t}\n\nfloat rand2(vec2 p)\n\t{\n\treturn fract(sin(dot(p.xy, vec2(12.9898, 78.233))) * 43758.5357);\n\t}\n\nvec2 rand2(float p)\n\t{\n\treturn fract(vec2(sin(p * 591.32), cos(p * 391.32)));\n\t}\n\nvec3 sky(vec3 rd, float t)\n\t{\n\tfloat u = atan(rd.z, rd.x) / PI / 2.0;\n\tfloat v = rd.y / length(rd.xz);\n\tfloat fg = exp(-0.04 * abs(v));\n\tvec2 ca = circuit(vec2(u, (v - t * 3.0) * 0.03));\n\tvec2 cb = circuit(vec2(-u, (v - t * 4.0) * 0.06));\n\tfloat c = (ca.x - ca.y * 0.2) + cb.y * 0.7;\n\tvec3 glow = pow(vec3(c), vec3(0.9, 0.5, .3) * 2.0);\n\tvec2 cr = vec2(u, (v - t * 5.0) * 0.03);\n\tfloat crFr = fract(cr.y);\n\tfloat r = smoothstep(1.8, 0.82, abs(crFr * 2.0 - 1.0));\n\tfloat vo = 0.0, gl = 0.0;\n\tfor(int i = 0; i < 6; i ++)\n\t\t{\n\t\tfloat id = float(i);\n\t\tvec2 off = rand2(id);\n\t\tvec2 pp = vec2(fract(cr.x * 5.0 + off.x + t * 8.0 * (0.5 + rand(id))) - 0.5, fract(cr.y * 12.0 + off.y * 0.2) - 0.5);\n\t\tfloat di = box(pp, vec2(0.2, 0.01), 0.02);\n\t\tvo += smoothstep(0.999, 1.0, 1.0 - di);\n\t\tgl += exp(max(di, 0.0) * -16.0);\n\t\t}\n\tvo = pow(vo * 0.4, 2.0);\n\tvec3 qds = vec3(1.0);\n\tvec3 col = mix(glow, qds, clamp(vo, 0.0, 1.0)) + vec3(0.05, 0.05, 0.05) * gl * 0.5;\n\treturn col + (1.0 - fg);\n\t}\n\nvec3 colorset(float v)\n\t{\n\treturn pow(vec3(v), vec3(0.4, 0.4, 0.4) * 10.0);\n\t}\n\n\n\nvec3 pixel(vec2 uv)\n\t{\n\tuv /= resolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= resolution.x / resolution.y;\n\tvec3 ro = vec3(0.0, 0.0, -0.0);\n\tvec3 rd = normalize(vec3(uv, 1.6));\n\tfloat t = time* 1.25;\n\tfloat down = PI / 2.0;\n\trd.yz = rotate(rd.yz, 0.0);\n\trd.xz = rotate(rd.xz, down);\n\trd.xy = rotate(rd.xy, down);\n\tvec3 col = sky(rd, t);\n\treturn pow(col, vec3(1.9)) * 1.3;\n\t}\n\n\n\nvoid main()\n\t{\n\tvec2 uv = gl_FragCoord.xy;\n\tvec3 col;\n\tvec2 h = vec2(0.0, 0.0);\n\tcol = pixel(uv);\n\tcol += pixel(uv + h.xy);\n\tcol += pixel(uv + h.yx);\n\tcol += pixel(uv + h.xx);\n\tcol /= 4.0;\n\tgl_FragColor = vec4(col, 1.0);\n\tgl_FragColor.b *= 0.36;\n\tgl_FragColor.g *= 0.36;\n\tgl_FragColor.r *= 0.1;\n\t\t\n\t}", "user": "b01805f", "parent": "/e#17767.0", "id": "17945.0"}