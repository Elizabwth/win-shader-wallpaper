{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n// The Following Code is a modified version of https://www.shadertoy.com/view/MtX3Ws#\n\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S. Guillitte 2015\n\nfloat zoom=1.5;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nfloat map(in vec3 p) {\n\t\n\tfloat res = 0.;\n\t\n    vec3 c = p;\n\tfor (int i = 0; i < 10; ++i) {\n        p =.7*abs(p)/dot(p,p) -.7;\n        p.yz= csqr(p.yz);\n        p=p.zxy;\n        res += exp(-19. * abs(dot(p,c)));\n        \n\t}\n\treturn res/2.;\n}\n\n\n\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    float t = tminmax.x;\n    //float dt = .02;\n    float dt = .4 - .35*sin(time) + dot(ro,rd)/100.;//animated\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<64; i++ )\n\t{\n        t+=dt*exp(-2.*c);\n        if(t>tminmax.y)break;\n        vec3 pos = ro+t*rd;\n        \n        c = map(ro+t*rd);               \n        \n\tfloat sc = .5;\n        col = .99*col+ .1*vec3(1.9*c*c*sc, 1.35*c*c*sc, 1.5*c*sc);//green\t\n    }    \n    return col;\n}\n\n\nvoid main()\n{\n    vec2 q = gl_FragCoord.xy / resolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= resolution.x/resolution.y;\n    vec2 m = vec2(0.);\n    //if( mouse.z>0.0 )m = mouse.xy/resolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\n    vec3 ro = zoom*vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,2.5) );\n\n\t// raymarch\n    vec3 col = raymarch(ro,rd,tmm);\n    //if (tmm.x<0.)col = textureCube(iChannel0, rd).rgb;\n    //else {\n        vec3 nor=(ro+tmm.x*rd)/2.;\n        nor = reflect(rd, nor);        \n        float fre = pow(.5+ clamp(dot(nor,rd),0.0,1.0), 3. )*1.3;\n        //col += textureCube(iChannel0, nor).rgb * fre;\n    \n    //}\n\t\n\t// shade\n    \n    col =  .5 *(log(1.+col));\n    col = clamp(col,0.,1.);\n    gl_FragColor = vec4( col, 1.0 );\n\n}", "user": "afa8d93", "parent": "/e#27584.0", "id": "27610.0"}