{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nvarying vec2 surfacePosition;\n\n// by srtuss, 2013\n// was trying to find some sort of \"mechanical\" fractal for texture/heightmap\n// generation, but then i ended up with this.\n\n// rotate position around axis\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\n// 1D random numbers\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\n\n// 2D random numbers\nvec2 rand2(in vec2 p)\n{\n\tvec2 tmp = fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));\n\treturn vec2(.5+.5*sin(tmp.x*time + p.x),.5+.5*cos(tmp.y*time + p.y));\n}\n\n// 1D noise\nfloat noise1(float p)\n{\n\tfloat fl = floor(p);\n\tfloat fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\n// voronoi distance noise, based on iq's articles\nfloat voronoi(in vec2 x)\n{\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n\t\n\tvec2 res = vec2(8.0);\n\tfor(int j = -1; j <= 1; j ++)\n\t{\n\t\tfor(int i = -1; i <= 1; i ++)\n\t\t{\n\t\t\tvec2 b = vec2(i, j);\n\t\t\tvec2 r = vec2(b) - f + rand2(p + b);\n\t\t\t\n\t\t\t// chebyshev distance, one of many ways to do this\n\t\t\tfloat d = max(abs(r.x), abs(r.y));\n\t\t\t\n\t\t\tif(d < res.x)\n\t\t\t{\n\t\t\t\tres.y = res.x;\n\t\t\t\tres.x = d;\n\t\t\t}\n\t\t\telse if(d < res.y)\n\t\t\t{\n\t\t\t\tres.y = d;\n\t\t\t}\n\t\t}\n\t}\n\treturn res.y - res.x;\n}\n\n\nvoid main(void)\n{\n\tvec2 suv = gl_FragCoord.xy / resolution.xy;\n\tsuv = (suv - 0.5) * 2.0;\n\tvec2 uv = surfacePosition;\n\n\tfloat v = 0.0;\n\tgl_FragColor = vec4(0.0);\n\t\n\t\n\t// add some noise octaves\n\tfloat a = 0.8, f = 5.0;\n\t\n\tfor(int i = 1; i < 3; i ++) // 4 octaves also look nice, its getting a bit slow though\n\t{\t\n\t\tfloat v1 = voronoi(uv * f + 5.0);\n\t\tfloat v2 = 0.0;\n\t\t\n\t\t// make the moving electrons-effect for higher octaves\n\t\tif(i > 0)\n\t\t{\n\t\t\t// of course everything based on voronoi\n\t\t\tv2 = voronoi(uv * f * 0.5 + 50.0 + time);\n\t\t\tgl_FragColor += vec4(0.1,0.2,0.5,1.0) * (0.07/v2 + 0.03/v1);\n\t\t\tfloat va = 0.0, vb = 0.0;\n\t\t\tva = 1.0 - smoothstep(0.0, 0.1, v1);\n\t\t\tvb = 1.0 - smoothstep(0.0, 0.08, v2);\n\t\t\tv += a * pow(va * (0.5 + vb), 2.0);\n\t\t}\n\t\t\n\t\t// make sharp edges\n\t\tv1 = 1.0 - smoothstep(0.0, 0.3, v1);\n\t\t\n\t\t// noise is used as intensity map\n\t\tv2 = a * (noise1(v1 * 5.5 + 0.1));\n\t\t\n\t\t// octave 0's intensity changes a bit\n\t\tif(i == 0)\n\t\t\tv += v2 * (noise1(time * 2.0) * 0.8 + 0.4);\n\t\telse\n\t\t\tv += v2;\n\t\t\n\t\tf *= 3.0;\n\t\ta *= 0.7;\n\t}\n\n\t// slight vignetting\n\tv *= exp(-0.6 * length(suv)) * 1.2;\n\t\n\t// use texture channel0 for color? why not.\n\t//vec3 cexp = texture2D(iChannel0, uv * 0.001).xyz * 3.0 + texture2D(iChannel0, uv * 0.01).xyz;//vec3(1.0, 2.0, 4.0);\n\t\n\t// old blueish color set\n\tvec3 cexp = vec3(3.0, 1.0, 3.0);\n\t\tcexp *= 1.3;\n\n\tvec3 col = vec3(pow(v, cexp.x), pow(v, cexp.z), pow(v, cexp.y)) * 2.0;\n\t\n\tgl_FragColor += vec4(col * vec3(0.2,0.2,0.45), 1.0);\n}", "user": "fbed637", "parent": "/e#13055.0", "id": "21950.1"}