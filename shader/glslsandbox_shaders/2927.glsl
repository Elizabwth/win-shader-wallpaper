{"code": "//something like Mr.doob's zoom blur\n//but no so cool\n\n//by nikoclass\n\n//update: now with some stars\n\n//update2: day and night sky\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\nconst int iterations = 50;\n\nconst vec3 day = vec3(0.3, 0.4, 0.8);\nconst vec3 night = vec3(0.05);\n\t\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nvec2 m;\nfloat aspect;\n\n\nvec3 getColor(vec2 pos) {\n\tif (distance(pos, m) < 0.11) {\n\t\treturn vec3(0.0);\n\t}\n\tif (length(pos) < 0.1) {\n\t\treturn vec3(1.0, 1.0, 0.8);\t\n\t}\n\t\n\tfloat lm = length(m);\n\tif (lm < 0.2) {\n\t\treturn mix(night, day, lm / 0.2);\t\n\t}\n\treturn day;\n\t\n}\n\nfloat rand(float x) {\n\tfloat res = 0.0;\n\t\n\tfor (int i = 0; i < 5; i++) {\n\t\tres += 0.244 * float(i) * sin(x * 0.68171 * float(i));\n\t\t\n\t}\n\treturn res;\n\t\n}\n\nvoid main( void ) {\n\tm = mouse - 0.5;\n\taspect = resolution.x / resolution.y;\n\tvec2 position = ( gl_FragCoord.xy / resolution.xy ) - 0.5;\n\tposition.x *= aspect;\n\tm.x *= aspect;\n\t\n\t\n\tvec3 color = getColor(position);\t\t\n\t\t\n\tvec3 light = vec3(0.0);\n\tvec2 incr = position / float(iterations);\n\tvec2 p = vec2(0.0, 0.0) + incr;\n\tfor (int i = 1; i < iterations; i++) {\n\t\tlight += getColor(p);\n\t\tp += incr;\n\t}\n\t\n\tlight /= float(iterations) * max(.01, dot(position, position)) * 50.0;\n\t\n\tvec2 star = vec2(gl_FragCoord);\n\tif (rand(star.y * star.x) >= 2.1 && rand(star.y + star.x) >= .7) {\n\t\tfloat lm = length(m);\n\t\tif (lm < 0.15) {\n\t\t\tcolor = mix(vec3(1.0), day, lm / 0.15);\n\t\t}\n\t}\n\t\n\tif (distance(position, m) < 0.11) {\n\t\tcolor = vec3(0.0);\n\t}\n\t\t\n\tgl_FragColor = vec4(color + light, 1.0);\n\n}", "user": "fa2e879", "parent": null, "id": "2927.4"}