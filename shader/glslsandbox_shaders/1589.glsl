{"code": "// \"moon river\" by @eddbiddulph\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float   time;\nuniform vec2    mouse;\nuniform vec2    resolution;\n\nvec3 cam_pos;\nmat3 cam_rot;\n\nvec3 transform(vec3 p)\n{\n   return cam_rot * (p - cam_pos);\n}\n\nvec2 project(vec3 p)\n{\n   return p.xy / p.z;\n}\n\nfloat gauss(float x, float a)\n{\n   return sqrt(a / 3.14159265) * exp(-a * x * x);\n}\n\nfloat blob(vec3 o, vec2 p)\n{\n   return gauss(distance(project(o), p), 50000.0 / abs(o.z - 6.01)) * 0.01;\n}\n\nvoid main()\n{\n   vec2 p = (gl_FragCoord.xy / resolution.xy - 0.5) * vec2(resolution.x / resolution.y, 1.0) * 1.0;\n\t\n   cam_pos = vec3(cos(time * 0.1) * 5.0, -1.0,  -7.0 + 1.0 + sin(time * 0.07));\n\n   vec3 cam_target = vec3(0.0, 1.0, 3.0);\n\n   cam_rot[2] = normalize(cam_target - cam_pos);\n\n   cam_rot[0] = cross(cam_rot[2], vec3(0.0, 1.0, 0.0));\n   cam_rot[1] = cross(cam_rot[2], cam_rot[0]);\n\n   gl_FragColor.rgb = vec3(0.0);\n\n   for(int i = 0; i < 20; ++i)\n   {\n      for(int j = 0; j < 20; ++j)\n      {\n         float u = (float(i) / 20.0 - 0.5) * 10.0,\n               v = (float(j) / 20.0 - 0.5) * 10.0;\n\n         float h = 1.0 + cos(u - time) * sin(v + time * 0.8) * 0.2;\n\n         vec3 g = transform(vec3(u + cos(v) * 0.5, h, v + sin(u) * 0.5));\n\n         if(g.z > 0.0)\n         {\n            gl_FragColor.rgb += blob(g, p.xy) * 2.0 * (2.0) * 0.25;\n         }\n      }\n   }\n\n   gl_FragColor.rgb += blob(transform(vec3(10.0, 0.0, 50.0)), p.xy) * 400.0;\n   gl_FragColor.rgb += blob(transform(vec3(0.0, 5.0, 50.0)), p.xy) * 0.2;\n\n   gl_FragColor.a = 1.0;\n}\n", "user": "6a45b8c", "parent": "/e#1495.0", "id": "1589.0"}