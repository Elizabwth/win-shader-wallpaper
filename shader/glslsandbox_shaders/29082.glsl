{"code": "precision mediump float;uniform float time;uniform vec2 resolution;\nvec3 roty(vec3 p,float a){return p*mat3(cos(a),0,-sin(a),0,1,0,sin(a),0,cos(a));}\nvarying vec2 surfacePosition;\nuniform vec2 mouse;\nfloat map(in vec3 p) {\n\tfloat res=0.;vec3 c = p;\n\tint lim = int(resolution.x/length(gl_FragCoord.xy-mouse*resolution));\n\tfor (int i = 0; i < 16; i++) {\n\t\tif(i > lim) break;\n\t\tp =0.9*abs(p)/dot(p,p) -.7;\n\t\tp.yz= vec2(p.y*p.y-p.z*p.z,2.*p.y*p.z);\n\t\tres += exp(-20. * abs(dot(p,c)));}\n\treturn res/2.0;}\n\nvec3 raymarch(vec3 ro, vec3 rd){\n\tfloat t = 4.0;\n\tvec3 col=vec3(0);float c=0.;\n\tfor( int i=0; i<64; i++ ){\n\t\tt+=0.02*exp(-2.0*c);\n\t\tc = map(ro+t*rd);               \n\t\tcol += vec3(c/2.0,c*c+0.1*sqrt(c),c*2.5/(1.+sqrt(c)))/4.0;}    \n\treturn col;}\n\nvoid main(){\n    vec2 p = (gl_FragCoord.xy-resolution/2.0)/(resolution.y);\n    vec3 ro = roty(vec3(3.),time*0.3);\n    vec3 uu = normalize( cross(ro,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ro));\n    vec3 rd = normalize( p.x*uu + p.y*vv -ro*0.3 );\n    gl_FragColor.rgb = 0.5*log(1.0+raymarch(ro,rd));\n    gl_FragColor.a = 1.0;\n}\n//original code from https://www.shadertoy.com/view/MtX3Ws\n//simplified edit: Robert 25.11.2015", "user": "3d3e30f", "parent": "/e#29081.0", "id": "29082.0"}