{"code": "\n//---------------------------------------------------------\n// Shader:   StarNursery.glsl    \n// original: https://www.shadertoy.com/view/XsfGzH\n// \n// Built from the basics of'Clouds' Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Edited by Dave Hoskins into \"StarNursery\"\n// V.1.1 Some speed up in the ray-marching loop.\n// V.1.2 Added Shadertoy's fast 3D noise for better, smaller step size.\n//---------------------------------------------------------\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D texture; \n\n//----------------------------------------------------------------------\n\n#define noTexture true\n\nmat3 m = mat3( 0.00, 0.90, 0.60, \n-0.90, 0.36, -0.48, \n-0.60, -0.48, 0.34 );\n\n//----------------------------------------------------------------------\nfloat hash( float n )\n{\n  return fract(sin(n)*43758.5453123);\n}\n\n//----------------------------------------------------------------------\nfloat noise( in vec2 x )\n{\n  vec2 p = floor(x);\n  vec2 f = fract(x);\n  f = f*f*(3.0-2.0*f);\n\n  float n = p.x + p.y*57.0;\n  float res = mix(mix( hash(n+  0.0), hash(n+  1.0), f.x), \n  mix( hash(n+ 57.0), hash(n+ 58.0), f.x), f.y);\n  return res;\n}\n\n//----------------------------------------------------------------------\nfloat noise( in vec3 x )\n{\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n  f = f*f*(3.0-2.0*f);\n\n  #ifdef noTexture\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0), f.x), \n    mix( hash(n+ 57.0), hash(n+ 58.0), f.x), f.y), \n      mix(mix( hash(n+113.0), hash(n+114.0), f.x), \n      mix( hash(n+170.0), hash(n+171.0), f.x), f.y), f.z);\n  #else\n    vec2 uv = (p.xy + vec2(37.0, 17.0)*p.z) + f.xy;\n    vec2 rg = texture2D( texture, mod((uv+ 0.5)/256.0, 1.0), -100.0 ).yx;\n    return mix( rg.x, rg.y, f.z );  \n  #endif\n}\n\n//----------------------------------------------------------------------\nfloat fbm( vec3 p )\n{\n  float f;\n  f  = 1.600*noise( p );    p = m*p*2.02;\n  f += 0.3500*noise( p );   p = m*p*2.33;\n  f += 0.2250*noise( p );   p = m*p*2.01;\n  f += 0.0825*noise( p );   p = m*p*2.01;\n  return f;\n}\n\n//----------------------------------------------------------------------\nvec4 map( in vec3 p )\n{\n  float d = 0.01- p.y;\n\n  float f= fbm( p*1.0 - vec3(.4, 0.3, -0.3)*time);\n  d += 4.0 * f;\n  d = clamp( d, 0.0, 1.0 );\n\n  vec4 res = vec4( d );\n  res.w = pow(res.y, .1);\n\n  res.xyz = mix( .7*vec3(1.0, 0.4, 0.2), vec3(0.2, 0.0, 0.2), res.y * 1.);\n  res.xyz = res.xyz + pow(abs(.95-f), 26.0) * 1.85;\n  return res;\n}\n//----------------------------------------------------------------------\nconst vec3 sundir = vec3(1.0, 0.4, 0.0);\n\nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n  vec4 sum = vec4(0, 0, 0, 0);\n\n  float t = 0.0;\n  vec3 pos = vec3(0.0, 0.0, 0.0);\n  for (int i=0; i<100; i++)\n  {\n    if (sum.a > 0.8 || pos.y > 9.0 || pos.y < -2.0) continue;\n    pos = ro + t*rd;\n\n    vec4 col = map( pos );\n\n    // Accumulate the alpha with the colour...\n    col.a *= 0.08;\n    col.rgb *= col.a;\n\n    sum = sum + col*(1.0 - sum.a);  \n    t += max(0.1, 0.04*t);\n  }\n  sum.xyz /= (0.003+sum.w);\n\n  return clamp( sum, 0.0, 1.0 );\n}\n\n//----------------------------------------------------------------------\nvoid main(void)\n{\n  vec2 q = gl_FragCoord.xy / resolution.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= resolution.x / resolution.y;\n  vec2 mo = (-1.0 + 2.0 + mouse.xy) / resolution.xy;\n\n  // Camera code...\n  vec3 ro = 5.6*normalize(vec3(cos(2.75-3.0*mo.x), .4-1.3*(mo.y-2.4), sin(2.75-2.0*mo.x)));\n  vec3 ta = vec3(.0, 5.6, 2.4);\n  vec3 ww = normalize( ta - ro);\n  vec3 uu = normalize(cross( vec3(0.0, 1.0, 0.0), ww ));\n  vec3 vv = normalize(cross(ww, uu));\n  vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n  // Ray march into the clouds adding up colour...\n  vec4 res = raymarch( ro, rd );\n\n  float sun = clamp( dot(sundir, rd), 0.0, 2.0 );\n  vec3 col = mix(vec3(.3, 0.0, 0.05), vec3(0.2, 0.2, 0.3), sqrt(max(rd.y, 0.001)));\n  col += .4*vec3(.4, .2, 0.67)*sun;\n  col = clamp(col, 0.0, 1.0);\n  col += 0.43*vec3(.4, 0.4, 0.2)*pow( sun, 21.0 );\n\n  // Do the stars...\n  float v = 1.0/( 2. * ( 1. + rd.z ) );\n  vec2 xy = vec2(rd.y * v, rd.x * v);\n  rd.z += time*.002;\n  float s = noise(rd.xz*134.0);\n  s += noise(rd.xz*370.);\n  s += noise(rd.xz*870.);\n  s = pow(s, 19.0) * 0.00000001 * max(rd.y, 0.0);\n  if (s > 0.0)\n  {\n    vec3 backStars = vec3((1.0-sin(xy.x*20.0+time*13.0*rd.x+xy.y*30.0))*.5*s, s, s); \n    col += backStars;\n  }\n\n  // Mix in the clouds...\n  col = mix( col, res.xyz, res.w*1.3);\n\n  #define CONTRAST 1.1\n  #define SATURATION 1.15\n  #define BRIGHTNESS 1.03\n  col = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), col*BRIGHTNESS)), col*BRIGHTNESS, SATURATION), CONTRAST);\n\n  gl_FragColor = vec4( col, 1.0 );\n}\n", "user": "5d0a1fb", "parent": null, "id": "23182.0"}