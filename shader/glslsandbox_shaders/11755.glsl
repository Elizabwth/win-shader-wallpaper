{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nvec3 iResolution;\nvec4 iMouse;\nfloat iGlobalTime;\n\n// by @301z\n\nfloat rand(vec2 n) { \n\treturn fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n// Genera ruido en funci\u00f3n de las coordenadas del pixel\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n// Fractional Brownian Amplitude. Suma varias \"capas\" de ruido.\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 1.0;\n\tfor (int i = 0; i < 4; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn += n;\n\t\tamplitude *= 0.5;\n\t}\n\treturn total;\n}\n\nvoid main() {\n\tiResolution = vec3(resolution.x,resolution.y,100.);\n\tiMouse = vec4(mouse.x,mouse.y,5.,5.);\n\tiGlobalTime = time;\n\n\t// Colores\n\tconst vec3 c1 = vec3(0.5, 0.5, 0.1); // Rojo oscuro.\n\tconst vec3 c2 = vec3(0.9, 0.0, 0.0); // Rojo claro.\n\tconst vec3 c3 = vec3(0.2, 0.0, 0.0); // Rojo oscuro.\n\tconst vec3 c4 = vec3(1.0, 0.9, 0.0); // Amarillo.\n\tconst vec3 c5 = vec3(0.1); // Gris oscuro.\n\tconst vec3 c6 = vec3(0.9); // Gris claro.\n\t\n\tvec2 p = gl_FragCoord.xy * 8.0 / iResolution.xx; // Desfasa las coordenadas para que haya m\u00e1s cambio de un resultado a los colindantes.\n\tfloat q = fbm(p - iGlobalTime * 0.1); // Ruido con offset para el movimiento.\n\tvec2 r = vec2(fbm(p + q + iGlobalTime * 0.7 - p.x - p.y), fbm(p + q - iGlobalTime * 0.4));\n\tvec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\n\tgl_FragColor = vec4(c * \n\t\t\t    cos(1.57 * gl_FragCoord.y / iResolution.y), // Gradiente m\u00e1s ocuro arriba.\n\t\t\t    1.0);\n}\n", "user": "40e6a93", "parent": "/e#11707.0", "id": "11755.1"}