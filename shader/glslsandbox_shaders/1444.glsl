{"code": "// \"Cobweb\" by Kabuto \n// Based on @ahnqqq's blob raymarcher\n\n# ifdef GL_ES\nprecision mediump float;\n# endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D backbuffer;\n\nconst vec3 diffuse = vec3( .5, .75, 1. );\nconst vec3 eps = vec3( .001, 0., 0. );\nconst int iter = 128;\nfloat sq = sqrt(2.0)*0.5;\n\nfloat c( vec3 p )\n{\n\tvec3 q = abs(mod(p+vec3(cos(p.z*0.5), cos(p.x*0.5), cos(p.y*0.5)),2.0)-1.0);\n\tfloat a = q.x + q.y + q.z - min(min(q.x, q.y), q.z) - max(max(q.x, q.y), q.z);\n\tq = vec3(p.x+p.y, p.y+p.z, p.z+p.x)*sq;\n\tq = abs(mod(q,2.0)-1.0);\n\tfloat b = q.x + q.y + q.z - min(min(q.x, q.y), q.z) - max(max(q.x, q.y), q.z);\n\treturn min(a,b);\n}\n\nvec3 n( vec3 p )\n{\n\tfloat o = c( p );\n\treturn normalize( o - vec3( c( p - eps ), c( p - eps.zxy ), c( p - eps.yzx ) ) );\n}\n\nvoid main()\n{\n\tfloat r = resolution.x / resolution.y;\n\tvec2 p = gl_FragCoord.xy / resolution * 2. - 1.;\n\tvec2 m = mouse + vec2(0.5,-0.5);\n\tp.x *= r;\n\tm.x *= r;\n\t\n\tvec3 o = vec3( 0., 0., time );\n\tvec3 s = vec3( m, 0. );\n\tvec3 b = vec3( 0., 0., 0. );\n\tvec3 d = vec3( p, 1. ) / 32.;\n\tvec3 t = vec3( .5 );\n\tvec3 a;\n\t\n\tfor( int i = 0; i < iter; ++i )\n\t{\n\t\tfloat h = c( b + s + o );\n\t\t//if( h < 0. )\n\t\t//\tbreak;\n\t\tb += h * 10.0 * d;\n\t\tt += h;\n\t}\n\tt /= float( iter );\n\ta = n( b + s + o );\n\tfloat x = dot( a, t );\n\tt = ( t + pow( x, 4. ) ) * ( 1. - t * .01 ) * diffuse;\n\n\tgl_FragColor = vec4( t, 1. );\n}\n", "user": "e5c6f9b", "parent": null, "id": "1444.1"}