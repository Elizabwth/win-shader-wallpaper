{"code": "// Author: @samloeschen\n// Title: paint archipelago\n\n//Quick exploration in fractal brownian motion and generating oil paint-like forms\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 resolution;\nuniform vec2 u_mouse;\nuniform float time;\n\n//generic random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n//@morgan3D noise\nfloat noise (in vec2 st) {\n\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n//could probably reduce octaves but meh\n#define octaves 14 \nfloat fbm (in vec2 p) {\n\n    float value = 0.0;\n    float freq = 1.0;\n    float amp = 0.5;    \n\n    for (int i = 0; i < octaves; i++) {\n        value += amp * (noise((p - vec2(1.0)) * freq));\n        freq *= 1.9;\n        amp *= 0.6;\n    }\n    return value;\n}\n\n//basically all the fbm warps are offset by big slow sine patterns\n//when they diverge/are moving away from each other the fluidity feels faster,\n//and when they converge its more chilled out\n\n//I haven't tried animating the fbm scales yet but could be cool?\n\n//TODO: add params to further manipulate color ramps with the domain warping\nfloat pattern(in vec2 p) {\n    vec2 offset = vec2(-0.5);\n\n    //generate main peaks/valleys\n    vec2 aPos = vec2(sin(time * 0.005), sin(time * 0.01)) * 6.;\n    vec2 aScale = vec2(3.0); //base fbm scale\n    float a = fbm(p * aScale + aPos);\n\n    //1st domain warp\n    vec2 bPos = vec2(sin(time * 0.01), sin(time * 0.01)) * 1.;\n    vec2 bScale = vec2(0.5); //this scale changes the main distortion density. less = smoky, more = oily\n    float b = fbm((p + a) * bScale + bPos);\n    \n    //2nd domain warp, yay now its paint. this one creates a bunch of diagonal countours that it wasn't\n    //immediately obvious how to remove, but they kind of look like sun shafts so whatever\n    vec2 cPos = vec2(-0.6, -0.5) + vec2(sin(-time * 0.001), sin(time * 0.01)) * 2.;\n    vec2 cScale = vec2(2.); //this scale \"zooms\" the image\n    float c = fbm((p + b) * cScale + cPos);\n    return c;\n}\n\n//iq palette\nvec3 palette(in float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.45, 0.25, 0.14);\n    vec3 c = vec3(1.0 ,1.0, 1.0);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid main() {\n    vec2 p = gl_FragCoord.xy / resolution.xy;\n    p.x *= resolution.x / resolution.y;\n\n    //bring out the orange \"islands\" more\n    float value = pow(pattern(p), 2.);\n\n    //map to palette. right now we are just mapping luminosity\n    //could be much more interesting/varied if the domain warping changed the color ramp\n    vec3 color = palette(value);\n\n    gl_FragColor = vec4(color, 1.0);\n}", "user": "a404d9f", "parent": null, "id": "45205.0"}