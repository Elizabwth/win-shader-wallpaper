{"code": "// water turbulence effect by joltz0r 2013-07-04, improved 2013-07-07\n// Altered\n// Studied by cheery in 2014-06-20\n// \n// realy need a comment feature without forking\n// anyways i did a commented version with checkerboard texture. http://glsl.heroku.com/e#9824.2\n// @joltz0r\n\n#ifdef GL_ES\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#endif\n\nuniform float time;\nvarying vec2 surfacePosition;\n\n#define MAX_ITER 10\nvoid main( void ) {\n\tvec2 sp = surfacePosition;\n\tvec2 p = sp*8.0- vec2(30.0);\n\tvec2 i = p;\n\tfloat c = 1.0;\n\tfloat inten = .01; // toned down intensity\n\n\tfor (int n = 0; n < MAX_ITER; n++) \n\t{\n\t\t// forms a fractal of sort. t is slightly higher for every iteration,\n\t\t// in range: -2.0, -0.5, 0.0, +0.25, +0.4, +0.5, slowly approaches 1.0\n\t\tfloat t = time * (1.0 - 3.0 / float(n+1));\n\t\t\n\t\t// try just plain i=p; to see what the effect is. It's recursively distorting the grid coordinates.\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\t\n\t\t// rewrote and removed the +t from i.x, i.y.\n\t\tc += 1.0/length(p.xy / (vec2(sin(i.x), cos(i.y)) / inten));\n\t}\n\tc /= float(MAX_ITER); // the thing accumulates and then averages.\n\t\n\t// removed few of the effects achieved by pow(1.5 - sqrt(c), 7.0) and scaled it down a bit more.\n\tc = 1.0-sqrt(c);\n\tgl_FragColor = vec4(pow(c, 1.0) * 0.8) + vec4(0.1, 0.15, 0.25, 1.0); // must change the color of course. :->\n}", "user": "bdc7abd", "parent": "/e#17810.1", "id": "17879.0"}