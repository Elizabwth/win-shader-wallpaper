{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// quadratic bezier curve evaluation\n// posted by Trisomie21\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nint solveCubic(in float a, in float b, in float c, out float r[3])\n{\n\tfloat  p = b - a*a / 3.0;\n\tfloat  q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n\tfloat p3 = p*p*p;\n\tfloat  d = q*q + 4.0*p3 / 27.0;\n\tfloat offset = -a / 3.0;\n\tif(d >= 0.0) { // Single solution\n\t\tfloat z = sqrt(d);\n\t\tfloat u = (-q + z) / 2.0;\n\t\tfloat v = (-q - z) / 2.0;\n\t\tu = sign(u)*pow(abs(u), 1.0/3.0);\n\t\tv = sign(v)*pow(abs(v), 1.0/3.0);\n\t\tif(abs(p) < abs(q)*0.005) {\n\t\t\tif(q <0.0) v = p / (3.0 * -pow(-q, 1.0/3.0));\n\t\t\telse u = p / (3.0 * pow(q, 1.0/3.0));\t\n\t\t}\t\t\t\n\t\tr[0] = offset + u + v;\n\t\treturn 1;\n\t}\n\tfloat u = sqrt(-p / 3.0);\n\tfloat v = acos(-sqrt( -27.0 / p3) * q / 2.0) / 3.0;\n\tfloat m = cos(v), n = sin(v)*1.732050808;\n\tr[0] = offset + u * (m + m);\n\tr[1] = offset - u * (n + m);\n\tr[2] = offset + u * (n - m);\n\treturn 3;\n}\n\n\nfloat DistanceToQBSpline(in vec2 P0, in vec2 P1, in vec2 P2, in vec2 p)\n{\n\tfloat dis = 1e20;\n\t\n\tvec2  sb = (P1 - P0) * 2.0;\n\tvec2  sc = P0 - P1 * 2.0 + P2;\n\tvec2  sd = P1 - P0;\n\tfloat sA = 1.0 / dot(sc, sc);\n\tfloat sB = 3.0 * dot(sd, sc);\n\tfloat sC = 2.0 * dot(sd, sd);\n\t\n\tvec2  D = P0 - p;\n\n\tfloat a = sA;\n\tfloat b = sB;\n\tfloat c = sC + dot(D, sc);\n\tfloat d = dot(D, sd);\n\n    \tfloat res[3];\n\tint n = solveCubic(b*a, c*a, d*a, res);\n\n\tfloat t = clamp(res[0],0.0, 1.0);\n\tvec2 pos = P0 + (sb + sc*t)*t;\n\tdis = min(dis, length(pos - p));\n\t\n    \tif(n>1) {\n\tt = clamp(res[1],0.0, 1.0);\n\tpos = P0 + (sb + sc*t)*t;\n\tdis = min(dis, length(pos - p));\n\t    \n\tt = clamp(res[2],0.0, 1.0);\n\tpos = P0 + (sb + sc*t)*t;\n\tdis = min(dis, length(pos - p));\t    \n    \t}\n\n    \treturn dis;\n}\n\nvoid main(void)\n{\n\tvec2 position = gl_FragCoord.xy;\n\tconst int pointCount = 4;\n\tvec2 p[2 * pointCount + 1];\n\t\n\tp[0] = vec2(resolution.x*0.5,resolution.y*.2);\n\tp[1] = mouse*resolution;\n\tp[2] = vec2(resolution.x*0.4,resolution.y*.8);\n\tp[4] = vec2(resolution.x*0.6,resolution.y*.8);\n\tp[6] = vec2(resolution.x*0.6,resolution.y*.6);\n\tp[8] = vec2(resolution.x*0.7,resolution.y*.2);\n\t\n\tfloat d = 9999.0;\n\tfor (int i = 0; i < pointCount; ++i)\n\t{\n\t\tif (i > 0)\n\t\t\tp[2*i+1] = 2.0 * p[2*i] - p[2*i - 1];\n\t\td = min(d, DistanceToQBSpline(p[2*i], p[2*i + 1], p[2*i + 2], position));\n\t}\n\t\n\tfloat lineThickness = 12.0;\n\tfloat lineSoftness = 1.0;\n\tfloat outline = 1.0;\n\td = (d - (lineThickness-1.0)) / lineSoftness;\n\tif(outline>0.0) d = abs(d)-outline;\n\t\n\t// Curve Control point\n\t\n\td = clamp(d, 0.0, 1.0);\n\td = mix(0.8, 0.5, d);\n\tgl_FragColor = vec4(d,d,d, 1.0);\n}", "user": "624b8b", "parent": "/e#4966.9", "id": "13442.0"}