{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// original here: https://www.shadertoy.com/view/MsXGRf - please preserve credits in downstream experiments.\n\n// tweaked for sandbox uniforms + removed input texture handlers\n\n\n// hash based 3d value noise\nfloat hash( float n )\n{\n    return fract(sin(n)*8.5453);\n}\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\n\n\nvec4 map( vec3 p )\n{\n\tvec3 r = p;\n\t\n\tfloat den = -0.6 - p.y;\n    // invert space\t\n    p.y += 0.6;\n\tp = -4.0*p/dot(p,p);\n\n\n    // twist space\t\n\tfloat an = -1.0*sin(0.1*time + 1.0*length(p.xz)  + 1.0*p.y);\n\tfloat co = cos(an);\n\tfloat si = sin(an);\n\tp.xz = mat2(co,-si,si,co)*p.xz;\n\n     // distort\t\n\tp.xz += 1.0*(-1.0+2.0*noise( p*1.1 ));\n\n    // pattern\n\tfloat f;\n\tvec3 q = p*0.85                     - vec3(0.0,1.0,0.0)*time*0.12;\n    f  = 0.50000*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*time*0.12;\n    f += 0.25000*noise( q ); q = q*2.03 - vec3(0.0,1.0,0.0)*time*0.12;\n\n\n\tden = clamp( (den + 4.0*f)*1.2, 0.0, 1.0 );\n\t\n\tvec3 col = 1.2*mix( vec3(1.0,0.8,0.6), 0.9*vec3(0.3,0.2,0.35), den ) ;\n\tcol += 0.05*sin(0.05*q);\n\tcol *= 1.0 - 0.8*smoothstep(0.6,1.0,sin(0.7*q.x)*sin(0.7*q.y)*sin(0.7*q.z))*vec3(0.6,1.0,0.8);\n\tcol *= 1.0 + 1.0*smoothstep(0.5,1.0,1.0-length( (fract(q.xz*0.12)-0.5)/0.5 ))*vec3(1.0,0.9,0.8) ;\n\tcol = mix( vec3(0.8,0.3,0.2), col, clamp( (r.y+0.1)/1.5, 0.0, 1.0 ) );\n\n\treturn vec4( col, den );\n}\n\n\nvec3 raymarch( in vec3 ro, in vec3 rd )\n{\n\tvec4 sum = vec4( 0.0 );\n\tvec3 bg = vec3(0.4,0.5,0.5)*1.3;\n\n\tfloat t = 0.0;\n\t\n\tfor( int i=0; i<96; i++ )\n\t{\n\t\tif( sum.a > 0.99 ) continue;\n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos );\n\t\t\n\t\tcol.xyz = mix( bg, col.xyz, exp(-0.002*t*t*t) );\n\t\t\n\t\tcol.a *= 0.5;\n\t\tcol.rgb *= col.a;\n\n\t\tsum = sum + col*(1.0 - sum.a);\t\n\t\t\n\t\tt += 0.05;\n\t\t\n\t}\n\n\tsum.xyz = mix( bg, sum.xyz/(0.001+sum.w), sum.w );\n\treturn clamp( sum.xyz, 0.0, 1.0 );\n}\n\nvoid main(void)\n{\n    // inputs\t\n    vec2 q = gl_FragCoord.xy / resolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= resolution.x/ resolution.y;\n\t\n    vec2 mo = mouse.xy / resolution.xy;\n    if( mouse.x<=0.00001 ) mo=vec2(0.0);\n\t\n    // camera\n\tfloat an = -0.07*time + 3.0*mo.x;\n    vec3 ro = 4.5*normalize(vec3(cos(an), 0.5, sin(an)));\n\tro.y += 1.0;\n\tvec3 ta = vec3(0.0, 0.5, 0.0);\n\tfloat cr = -0.4*cos(0.02*time);\n\t\n\t// build ray\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\t\t\n    // raymarch\t\n\tvec3 col = raymarch( ro, rd );\n\t\n\t// contrast\n\tcol = col*col*(3.0-2.0*col)*1.4 - 0.4;\n\t\n    col.y *= 1.05;\t\n    // vignetting\t\t\n\tcol *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n    gl_FragColor = vec4( col, 1.0 );\n}\n\n\n\n", "user": "ff35672", "parent": "/e#10647.1", "id": "10730.0"}