{"code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform vec2 resolution;\nuniform float time;\n\n//anony_gt\n\nvec2 obj_0(in vec3 p)\n{\n  //obj repeating\n  p.x=1.0;//sin(p.x)*cos(time);\n  p.z=sin(p.z);\n  p.y=sin(p.y);\n\n/*\n  \tfloat sdSphere( vec3 p, float s )\n\t\t{\n \t \treturn length(p)-s;\n\t\t}\n*/\n  return vec2(length(p)- 1.01);\n }\n\n//sphere with simple solid color\n//vec3 obj1_c(in vec3 p)\n//{\n//\treturn sphere_color;\n//}\nvec3 obj_0c(in vec3 p){\n if (fract(p.x*.5)>.5)\n   if (fract(p.z*.5)>.5)\n     return vec3(0,0,0);\n   else\n     return vec3(1,1,1);\n else\n   if (fract(p.z*.5)>.5)\n     return vec3(1,1,1);\n   else\n     return vec3(0,0,0);\n}\n\n\nvoid main(void)\n{\n  vec2 vPos=-1.0+2.0*gl_FragCoord.xy/resolution.xy;\n\n  //animate\n  vec3 vuv=vec3(0,1,sin(time*0.1));//Change camere up vector here\n  vec3 prp=vec3(sin(time*0.15)*2.0,sin(time*0.5)*2.0,cos(time*0.1)*8.0); //Change camera path position here\n  vec3 vrp=vec3(0,0,1.); //Change camere view here\n\n\n  //camera\n  vec3 vpn=normalize(vrp-prp);\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 vcv=(prp+vpn);\n  vec3 scrCoord=vcv+vPos.x*u*resolution.x/resolution.y+vPos.y*v;\n  vec3 scp=normalize(scrCoord-prp);\n\n  //Raymarching\n  //refine edge w .01\n  const vec3 e=vec3(0.01,0,0);\n  vec2 s=vec2(0.01,0.0);\n  vec3 c,p,n;\n  //clip\n\tfloat f=1.0;\n\tfor(int i=0;i<256;i++)\n\t{\n\t\tif (abs(s.x)<.01||f>30.0) break;\n\t\tf+=s.x;\n\t\tp=prp+scp*f;\n\t\ts=obj_0(p);\n\t}\n  //depth\n\tif (f<30.0)\n\t{\n\t\n\n\tc=obj_0c(p);\n\t\t\n\tconst float n_er=0.01;\n\tfloat v1=obj_0(vec3(p.x+n_er,p.y-n_er,p.z-n_er)).x;\n\tfloat v2=obj_0(vec3(p.x-n_er,p.y-n_er,p.z+n_er)).x;\n\tfloat v3=obj_0(vec3(p.x-n_er,p.y+n_er,p.z-n_er)).x;\n\tfloat v4=obj_0(vec3(p.x+n_er,p.y+n_er,p.z+n_er)).x;\n\tn=normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n    \n\tfloat b=dot(n,normalize(prp-p));\n\n    \t\t//n=normalize(\n\t\t//vec3(s.x-obj1(p-e.xyy).x, s.x-obj1(p-e.yxy).x, s.x-obj1(p-e.yyx).x));\n\t\t//float b=dot(n,normalize(prp-p));\n\t\tgl_FragColor=vec4((b*c+pow(b,64.0))*(1.0-f*.05),1.);//simple phong LightPosition=CameraPosition\n\t}\n\t\n  else gl_FragColor=vec4(0.,0.,0.,1.); //background color\n}", "user": "c6a76bc", "parent": "/e#876.0", "id": "892.1"}