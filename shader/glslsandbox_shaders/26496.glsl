{"code": "// Mode 7!\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n//#define SKY\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,\n                      0.366025403784439,\n                     -0.577350269189626,\n                      0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod289(i);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec2 rotate(vec2 vector, float angle)\n{\n\treturn vec2(vector.x * cos(angle) - vector.y * sin(angle), vector.x * sin(angle) + vector.y * cos(angle));\n}\n\nvec3 checkers(vec2 p)\n{\n\treturn vec3((sin(p.x * 20.0) * sin(p.y * 40.0)));\n}\n\nvec3 noise(vec2 p)\n{\n\treturn vec3(((snoise(p * 1.0) + snoise(p * 2.0) + snoise(p * 3.0) + snoise(p * 4.0) + snoise(p * 8.0)\n\t\t      + snoise(p * 12.0) + snoise(p * 20.0) + snoise(p * 30.0) + snoise(p * 40.0)) + 0.5) / 9.0);\n}\n\nvec3 sky(float x, float y)\n{\n\treturn vec3(1.0 - sin(y) * 0.5, 1.0 - sin(y) * 0.2, 1.0);\n}\n\nvec3 mode7(float horizon, float fov, vec2 pos, vec2 trans, float angle)\n{\n\treturn noise(rotate(vec2(pos.x / (pos.y - horizon), (pos.y - horizon - fov) / (pos.y - horizon)) + trans, angle)) * sqrt((pos.y - horizon) * (pos.y - horizon)) * 5.0;\n}\n\nvoid main()\n{\n\tvec2 pos = (gl_FragCoord.xy / resolution.xy) - 0.5;\n\t#ifdef SKY\n\tif (pos.y < 0.1) {\n\t\tgl_FragColor = vec4(mode7(0.1, 0.3, pos, vec2(sin(time) / 2.0, time), 0.0), 1.0);\n\t} else {\n\t\tgl_FragColor = vec4(sky(pos.x, pos.y), 1.0);\n\t}\n\t#else\n\tgl_FragColor = vec4(mode7(0.1, 0.3, pos, vec2(sin(time) / 2.0, time), 0.0), 1.0);\n\t#endif\n}", "user": "5d56a8a", "parent": null, "id": "26496.4"}