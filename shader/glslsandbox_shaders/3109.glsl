{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Community flags\n\n// Individual flags taken from other shaders \n//\n// enhanced edition, best viewed at 1\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define WAVE\n\nfloat kFlagCount = 18.0; // +1 to add new flag\n\nvec3 Flag0( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2701.0\n\tvec3 c = vec3(1.0, 0.48, 0.15);\n\tif((p.y > 0.6 && p.y < 0.7) || (p.x > 0.7 && p.x < 0.76))  c = vec3(1.0, 0.9, 0.3);\n\treturn c;\n}\n\nvec3 Flag1( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2703.0\n\t// Czech Republic\n\tvec3 c = vec3(1, 1, 1);\n\tif (-p.x + 1.0 > p.y) c = vec3(0, 0, 1);\n\tif (p.y < 0.5) {\n\t\tc = vec3(1, 0, 0);\n\t\tif (p.x < p.y) c = vec3(0, 0, 1);\n\t}\t\t\n\t\n\treturn c;\n}\n\nvec3 Flag2orig( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2724.0\n\t// Germany\n\tvec3 c = vec3(0.0);\n\tif(p.y < 0.333)\n\t\tc = vec3(1.0, 0.8, 0.0);\n\telse if(p.y > 0.333 && p.y < 0.666) \n\t\tc = vec3(1.0, 0.0, 0.0);\n\telse\n\t\tc = vec3(0.0);\n\treturn c;\n}\n\nvec3 Flag2enh( vec2 p)\n{\n\t// \"Germany\"\n\tfloat r = -2.0*time;\n\tvec3 c = vec3(1.0);\n\tp -= 0.5;\n\tp.x *= resolution.x / resolution.y;\n\tp /= 0.43;\n\tif(length(p) >= 1.0)\n\t\treturn vec3(1.,0.0,0.0);//changed this to pink, b/c wtf, you really had to add a swastika?\n\tp = vec2(p.x*cos(r)+p.y*sin(r), -p.x*sin(r)+p.y*cos(r))/0.67 /*should be r*/;\t\n\tif(abs(p.x) > 1.0 || abs(p.y) > 1.0)\n\t\treturn c;\n\tif(p.y < 0.0) p = vec2(-p.x, -p.y);\n\tif(p.x < 0.0) p = vec2(p.y, -p.x);\n\tif(p.y > 0.2 && p.y < 0.6 && p.x > 0.2)\n\t\treturn c;\n\treturn vec3(0.0);\t\n}\n\nvec3 noise( vec3 p)\n{\n\treturn vec3(0.5 + 0.5 * fract(sin(dot(p.xyz, vec3(7.791,12.9898, 78.233)))* 43758.5453));\n}\nvec3 Flag2( vec2 p)\n{\n\t//if(mod(time,2.0) >= 1.7)\n\t// \treturn noise(vec3(time,p.xy));\n\t//if(mod(time,4.0) >= 2.0)\n\t\treturn Flag2orig(p);\n//\treturn Flag2enh(p);\n\t// no swastika\n}\n\nvec3 Flag3( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2727.0\n\t// Poland\n\tfloat gb = 1.0;\n\tif (p.y < 0.5)\n\t\tgb = 0.0;\n\n\treturn vec3( 1.0, gb, gb);\n}\n\nvec3 Flag4( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2766.0\n\t// Japan\n\tp -= 0.5;\n\tp.y *= resolution.y / resolution.x;\n\n\tfloat col = clamp((length(p) - 0.12) * 1000.0, 0.0, 1.0);\n\treturn vec3(1.0, col, col);\n}\n\nvec3 Flag5( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2731.1\n\t// United Kingdom\n\tvec3 kRed = vec3( 204.0 / 255.0, 0.0, 0.0 );\n\tvec3 kWhite = vec3( 1.0, 1.0, 1.0 );\n\tvec3 kBlue = vec3( 0.0, 0.0, 102.0 / 255.0 );\n\t\n\tvec3 c = kBlue;\n\n\tp = p * 2.0 - 1.0;\n\tfloat d = -p.x * sign(p.y) + p.y * sign(p.x);\n\t\n\tif((abs(p.x) < (6.0/60.0)) || (abs(p.y) < (6.0/30.0)))\n\t{\n\t\tc = kRed;\n\t}\n\telse \n\tif((abs(p.x) < (10.0/60.0)) || (abs(p.y) < (10.0/30.0)))\n\t{\n\t\tc = kWhite;\n\t}\n\telse \n\tif( (d > 0.0)  && (d < 0.15))\n\t{\n\t\tc = kRed;\n\t}\n\telse\n\tif( (d > -0.15 * 3.0 / 2.0)  && (d < 0.15 * 3.0 /2.0))\n\t{\n\t\tc = kWhite;\n\t}\n\t\n\treturn c;\n}\n\nvec3 Flag6( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2737.0\n\t// Serbia and Montenegro\n\tvec3 c = vec3(0.0);\n\tif(p.y < 0.3333333333333333333333)\n\t\tc = vec3(0.2, 0.2, 1.0);\n\telse if(p.y > 0.3333333333333333 && p.y < 0.666666666666666666666666) \n\t\tc = vec3(1.0, 1.0, 1.0);\n\telse\n\t\tc = vec3(1.0, 0.2, 0.2);\n\treturn c;\n}\n\nvec3 Flag7( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2739.0\n\t// Italy\n\tvec3 c = vec3(0.807, 0.168, 0.215);\n\tif(p.x < 0.333)\n\t\tc = vec3(0, 0.572, 0.274);\n\telse if(p.x > 0.333 && p.x < 0.666) \n\t\tc = vec3(1.0, 1.0, 1.0);\n\treturn c;\n}\n\nvec3 Flag8( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2740.0\n\t// Spain\n\tvec3 c = vec3(0.666, 0.082, 0.098);\n\tif(p.y > 0.25 && p.y < 0.75)\n\t\tc = vec3(0.945, 0.749, 0.0);\n\treturn c;\n}\n\n\nvec3 Flag9( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2770.4\n\t// Hungary\n\t\n\t/*\n\t * Author: Yours3!f\n\t * Ripple effect taken from here (glsl.heroku.com/e#2757)\n\t * This flag has proper colors (not just r = 1, b = 1)\n\t */\t\n\tvec3 red = vec3(206, 17, 38) / vec3(255);\n\tvec3 green = vec3(0, 135, 81) / vec3(255);\n\t\n\tvec3 c = vec3(1);\n\t\t\n\tif(p.y > 0.66)\n\t\tc.xyz = red;\t\n\telse if(p.y < 0.33)\n\t\tc.xyz = green;\n\t\t\n\treturn c;\n}\n\nvec3 Flag10( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2752.0\n\t// Greek Flag by Optimus\n\t// I am not sure about the color or dimensions but one can fork this\n\t\n\t//Added proper color, by Yours3!f\n\tvec3 blue = vec3(13, 94, 175) / vec3(255);\n\tvec3 white = vec3(1.0, 1.0, 1.0);\n\tvec3 finalcolor = vec3(0.0);\n\n\tfloat stripes = mod(p.y * 4.5, 1.0);\n\tvec3 stripecol = vec3(0.0);\n\tif (stripes < 0.5)\n\t{\n\t\tstripecol = blue;\n\t}\n\telse\n\t{\n\t\tstripecol = white;\n\t}\n\n\tvec3 crosscol = vec3(0.0);\n\tif (p.x < 0.4 && p.y > 0.444)\n\t{\n\t\tcrosscol = blue;\n\n\t\tif (p.x > 0.15 && p.x < 0.25) crosscol = white;\n\t\tif (p.y > 0.666 && p.y < 0.778) crosscol = white;\n\n\t\tfinalcolor = crosscol;\n\t}\n\telse\n\t{\n\t\tfinalcolor = stripecol;\n\t}\n\n\treturn finalcolor;\n}\n\n\t\nvec3 Flag11( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2758.0\n\t// France\n\tvec3 c = vec3(0.0);\n\tif(p.x < 0.3333333333333333333333)\n\t\tc = vec3(0.2, 0.2, 1.0);\n\telse if(p.x > 0.3333333333333333 && p.x < 0.666666666666666666666666) \n\t\tc = vec3(1.0, 1.0, 1.0);\n\telse\n\t\tc = vec3(1.0, 0.2, 0.2);\n\n\treturn c;\n}\n\nvec3 Flag12( vec2 p )\n{\n\t// http://glsl.heroku.com/e#2772.4\n\t//  Denmark!\n\t//  by @dennishjorth\n\t//\n\t//  orlogsflag by @neoneye\n\t//\n\t//  Please! Set the precision to 0.5!\n\t//  otherwise it hurts your eyes...\t\n\t\n\tvec3 kRed = vec3( 255.0 / 255.0, 0.0, 0.0 );\n\tvec3 kWhite = vec3( 1.0, 1.0, 1.0 );\n\t\t\n\tvec3 c;\n\tp = p * 2.0 - 1.0;\n\tif(abs(p.y) < (1.0 - (1.0 - p.x) * 1.2)) {\n\t\tc = vec3(0, 0.26, 0);\n\t} else \n\tif((abs(p.x+0.3) < (6.0/60.0)) || (abs(p.y) < (6.0/30.0)))\n\t{\n\t\tc = kWhite;\n\t}\n\telse\n\t{\n\t\tc = kRed;\n\t}\n\treturn c;\n}\n\nvec3 Flag13( vec2 p )\n{\n\t// England\n\tvec3 kRed = vec3( 204.0 / 255.0, 0.0, 0.0 );\n\tvec3 kWhite = vec3( 1.0, 1.0, 1.0 );\n\t\n\tvec3 c = kWhite;\n\n\tp = p * 2.0 - 1.0;\t\n\tif((abs(p.x) < (6.0/60.0)) || (abs(p.y) < (6.0/30.0)))\n\t{\n\t\tc = kRed;\n\t}\n\t\n\treturn c;\n}\n\nvec3 Flag14( vec2 p )\n{\n\t// Russia\n\tvec3 c = vec3(0.0);\n\tif(p.y > 0.666)\n\t\tc = vec3(1.0);\n\telse if(p.y < 0.666 && p.y > 0.333) \n\t\tc = vec3(0.0, 0.0, 1.0);\n\telse\n\t\tc = vec3(1.0, 0.0, 0.0);\n\treturn c;\n}\n\nvec2 rotate(vec2 point, float rads) {\n\tfloat cs = cos(rads);\n\tfloat sn = sin(rads);\n\treturn point * mat2(cs, -sn, sn, cs);\n}\n\nint star(vec2 p) {\n\tp -= vec2(0.5, 0.5);\n\tp = p.yx;\n\tp.x = -p.x;\n\tp.x -= 0.04;\n\t\n\tint i = (length(p) > 0.4) ? 1 : 0;\n\n\tvec2 p0 = rotate(p, radians(36.0));\n\tvec2 p1 = rotate(p, radians(108.0));\n\tvec2 p2 = rotate(p, radians(180.0));\n\tvec2 p3 = rotate(p, radians(252.0));\n\tvec2 p4 = rotate(p, radians(324.0));\n\t\n\tint j = 0;\n\t\n\tfloat v = 0.13;\n\tif(p0.x > v) j++;\n\tif(p1.x > v) j++;\n\tif(p2.x > v) j++;\n\tif(p3.x > v) j++;\n\tif(p4.x > v) j++;\n\n\treturn (j < 2 && i < 1) ? 1 : 0;\n}\n\nvec3 Flag15( vec2 p )\n{\n\t// \"American2084\", by @neoneye\n\tvec3 kWhite = vec3( 1.0, 1.0, 1.0 );\n\tvec3 kRed = vec3( 204.0 / 255.0, 0.0, 0.0 );\n\tvec3 kBlue = vec3( 0.0, 0.0, 250.0 / 255.0 );\n\n\tvec3 c = kBlue;\n\tif(p.x > 0.5 || p.y < 0.4) {\n\t\tvec2 b = p;\n\t\tb.y = (b.y - 0.4) / 0.6;\n\t\tb.y *= 3.8;\n\t\tb = mod(b, 1.0);\n\t\tc = (b.y > 0.5) ? kRed : kWhite;\n\t} else {\n\t\tvec2 a = p;\n\t\ta.x *= 20.0;\n\t\ta.y *= 8.0;\n\t\ta = mod(a, 1.0);\n\t\tif(star(a) > 0) {\n\t\t\tc = kWhite;\n\t\t}\n\t}\n\treturn c;\n}\n\nvec3 Flag16( vec2 p )\n{\n\t// Unknown country, by @neoneye\n\tvec3 kGreen = vec3( 0.0, 204.0 / 255.0, 0.0 );\n\tvec3 kWhite = vec3( 1.0, 1.0, 1.0 );\n\n\tvec3 c = vec3(0.0);\n\t\n\tif(star(p) > 0) {\n\t\tc = kWhite;\n\t} else {\n\t\tif(p.x < 0.5) {\n\t\t\tc = kGreen;\n\t\t}\n\t}\n\treturn c;\n}\n\n\nvec3 Flag17( vec2 p )\n{\n\tvec3 c = vec3(0.0); // add new flag code here\n\treturn c;\n}\n\nvec3 Flag18( vec2 p )\n{\n\t// Canada\n\tvec3 kRed = vec3( 1.0, 0.0, 0.0 );\n\tvec3 kWhite = vec3( 1.0, 1.0, 1.0 );\n\n\tvec3 c = vec3(0.0);\n\t\n\tif(star(p) > 0) {\n\t\tc = kWhite;\n\t} else {\n\t\tif(p.x < 0.5) {\n\t\t\tc = kRed;\n\t\t}\n\t}\n\treturn c;\n}\nvec3 GetFlagCol(vec2 p, float index)\n{\t\n\tindex = mod(index, kFlagCount);\n\t\n\tif(index < 0.5) {\n\t\treturn Flag0(p);\n\t}\n\telse if(index < 1.5) {\n\t\treturn Flag1(p);\n\t}\n\telse if(index < 2.5) {\n\t\treturn Flag2(p);\n\t}\n\telse if(index < 3.5) {\n\t\treturn Flag3(p);\n\t} \n\telse if(index < 4.5) {\n\t\treturn Flag4(p);\n\t}\n\telse if(index < 5.5) {\n\t\treturn Flag5(p);\n\t}\n\telse if(index < 6.5) {\n\t\treturn Flag6(p);\n\t}\n\telse if(index < 7.5) {\n\t\treturn Flag7(p);\n\t}\n\telse if(index < 8.5) {\n\t\treturn Flag8(p);\n\t}\n\telse if(index < 9.5) {\n\t\treturn Flag9(p);\n\t}\n\telse if(index < 10.5) {\n\t\treturn Flag10(p);\n\t}\n\telse if(index < 11.5) {\n\t\treturn Flag11(p);\n\t}\n\telse if(index < 12.5) {\n\t\treturn Flag12(p);\n\t}\n\telse if(index < 13.5) {\n\t\treturn Flag13(p);\n\t}\n\telse if(index < 14.5) {\n\t\treturn Flag14(p);\n\t}\n\telse if(index < 15.5) {\n\t\treturn Flag15(p);\n\t}\n\telse if(index < 16.5) {\n\t\treturn Flag16(p);\n\t}\n\telse if(index < 17.5) {\n\t\treturn Flag17(p);\n\t}\n\telse if(index < 18.5) {\n\t\treturn Flag18(p);\n\t}\n\t\n\treturn     vec3(0.0);\n}\n\nvoid main( void )\n{\n\tvec2 p = gl_FragCoord.xy / resolution.xy;\n\t\n\t// apply movement\n\tvec2 p2 = p * 8.0;            \n\tp2.y += time * 0.15;\n\t\n\n\tfloat shade = 1.0;\n\t\n\t#ifdef WAVE\n\tfloat nx =0.0;\n\t\n\tfloat k_freq = 100.0;\n\tfloat k_x_movement = 0.025;\n\tfloat k_y_movement = 0.05;\n\tfloat k_scroll_speed = 4.0;\n\t\n\tfloat mag = 1.0;\n\tfloat freq = 1.0;\n\tfloat scroll_speed = 1.0;\n\tfor(int i=0; i<3; i++)\n\t{\n\t\t// move more near the right\n\t\tfloat movement_amount = fract(p2.x);\n\t\tif(movement_amount > 0.9) movement_amount = 0.0;                          \n\t       \n\t\t// wibble                             \n\t\tfloat f = (p.x) * freq * k_freq - time * scroll_speed * k_scroll_speed;\n\t\tfloat dx = cos( f ) * mag * movement_amount;\n\t\tfloat dy = (sin( f ) ) * mag * movement_amount;\n\t       \n\t\tp2.x += dx * k_x_movement;\n\t\tp2.y += dy * k_y_movement;\n\t       \n\t\t// accumulate dx movement for shading\n\t\tnx += dx;\n\t       \n\t\tfreq *= 2.0;\n\t\tmag *= 0.2;\n\t\tscroll_speed *= 2.5;\n\t}\n\t\n\tshade = clamp(0.8 - nx * 0.2, 0.0, 1.0);\n\t#endif // WAVE\n\n\tfloat index = floor(p2.x) + floor(p2.y) * 5.0;\n\tvec2 vFlagCoord = fract(p2) * 1.25;\n\t\n\t// default background\n\tvec3 vCol = vec3(0.0, 0.2, 0.0);\n\t\t\n\t// get flag col\n\tif((vFlagCoord.x <= 1.0) && (vFlagCoord.y <= 1.0))\n\t{\n\t\tvCol = GetFlagCol( vFlagCoord, index ) * shade;                \n\t}\n\t\n\t//vCol = GetFlagCol( p, kFlagCount ); // uncomment to show flag full screen\n\t\n\tgl_FragColor = vec4( vCol, 1.0 );\n}", "user": "e607441", "parent": "/e#3061.0", "id": "3109.0"}