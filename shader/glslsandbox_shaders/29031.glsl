{"code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n//\"Infinite\" Raymarched Maze\n//By: Flyguy\n\n//Raymarch settings\n\n#define MIN_DIST 0.001\n#define MAX_DIST 24.0\n#define MAX_STEPS 96\n#define STEP_MULT 1.0\n#define NORMAL_OFFS 0.01\n\n//Scene settings\n\n//#define SHOW_RAY_COST\n\n#define DEMO_MODE\n#define FLY_MODE\n\n#define SKY_COLOR    vec3(0.00, 0.00, 0.00)\n#define HAZE_COLOR   vec3(0.50, 0.90, 0.00)\n#define WALL_COLOR   vec3(0.30, 0.30, 0.30)\n#define STRIPE_COLOR vec3(1.00, 0.10, 1.00)\n\n#define WALL_HEIGHT 0.5\n#define WALL_WIDTH 0.125\n#define MAZE_SCALE 1.5\n\n//Object IDs\n#define SKYDOME 0.\n#define FLOOR 1.\n#define WALLS 2.\n\nfloat pi = atan(1.0) * 4.0;\nfloat tau = atan(1.0) * 8.0;\n\nvec2 tile = vec2(0);\n\nstruct MarchResult\n{\n    vec3 position;\n    vec3 normal;\n    float dist;\n    float steps;\n    float id;\n};\n\n//Returns a rotation matrix for the given angles around the X,Y,Z axes.\nmat3 Rotate(vec3 angles)\n{\n    vec3 c = cos(angles);\n    vec3 s = sin(angles);\n    \n    mat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0,c.x,s.x, 0.0,-s.x, c.x);\n    mat3 rotY = mat3( c.y, 0.0,-s.y, 0.0,1.0,0.0, s.y, 0.0, c.y);\n    mat3 rotZ = mat3( c.z, s.z, 0.0,-s.z,c.z,0.0, 0.0, 0.0, 1.0);\n\n    return rotX * rotY * rotZ;\n}\n\nfloat noise(vec2 pos) \n{\n\treturn abs(fract(sin(dot(pos ,vec2(19.9*pos.x,28.633*pos.y))) * 1341.9453*pos.x));\n}\n\n//==== Distance field operators/functions by iq. ====\nvec2 opU(vec2 d1, vec2 d2)\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\nvec2 opS(vec2 d1, vec2 d2)\n{\n    return (-d1.x > d2.x) ? d1*vec2(-1,1) : d2;\n}\n\nvec2 sdSphere(vec3 p, float s, float id)\n{\n  return vec2(length(p) - s, id);\n}\n\nvec2 sdPlane(vec3 p, vec4 n, float id)\n{\n  // n must be normalized\n  return vec2(dot(p,n.xyz) + n.w, id);\n}\n//===================================================\nvec2 sdMaze(vec3 p, float id)\n{\n    vec2 t = floor(p.xy * MAZE_SCALE);\n    \n\tp.xy = fract(p.xy * MAZE_SCALE) - 0.5;    \n\tp.x *= 2.0*floor(fract(noise(t) * 4.3) * 1.8) - 1.0; \n    \n\tfloat d = abs(1.0 - 2.0 * abs(dot(p.xy, vec2(1.0)))) / (2.0 * sqrt(2.0));\n    \n    return vec2(max((d / MAZE_SCALE) - WALL_WIDTH / 2.0, -p.z - WALL_HEIGHT), id);\n}\n\n//Distance to the scene\nvec2 Scene(vec3 p)\n{\n    vec2 d = vec2(MAX_DIST, SKYDOME);\n    \n    d = opU(d, sdPlane(p, vec4(0, 0,-1, 0), FLOOR));\n    \n    d = opU(d, sdMaze(p, WALLS));\n    \n\treturn d;\n}\n\n//Surface normal at the current position\nvec3 Normal(vec3 p)\n{\n    vec3 off = vec3(NORMAL_OFFS, 0, 0);\n    return normalize\n    ( \n        vec3\n        (\n            Scene(p + off.xyz).x - Scene(p - off.xyz).x,\n            Scene(p + off.zxy).x - Scene(p - off.zxy).x,\n            Scene(p + off.yzx).x - Scene(p - off.yzx).x\n        )\n    );\n}\n\n//Raymarch the scene with the given ray\nMarchResult MarchRay(vec3 orig,vec3 dir)\n{\n    float steps = 0.0;\n    float dist = 0.0;\n    float id = 0.0;\n    \n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        vec2 object = Scene(orig + dir * dist);\n        //Add the sky dome and have it follow the camera.\n        object = opU(object, -sdSphere(dir * dist, MAX_DIST, SKYDOME));\n        \n        dist += abs(object.x) * STEP_MULT;\n        \n        id = object.y;\n        \n        steps++;\n        \n        if(abs(object.x) < MIN_DIST * dist)\n        {\n            break;\n        }\n    }\n    \n    MarchResult result;\n    \n    result.position = orig + dir * dist;\n    result.normal = Normal(result.position);\n    result.dist = dist;\n    result.steps = steps;\n    result.id = id;\n    \n    return result;\n}\n\n//Scene texturing/shading\nvec3 Shade(MarchResult hit, vec3 direction, vec3 camera)\n{\n    vec3 color = vec3(0.0);\n\n    if(hit.id == FLOOR)\n    {\n        float d = sdMaze(hit.position, 0.0).x;\n        float a = smoothstep(0.05, 0.04, d);\n        \n        color = mix(WALL_COLOR, STRIPE_COLOR, a);\n    }\n    if(hit.id == WALLS)\n    {\n        float a = smoothstep(0.05, 0.04, min(-hit.position.z, hit.position.z + WALL_HEIGHT));\n        color = mix(WALL_COLOR, STRIPE_COLOR, a);\n    }\n    \n    //Lighting\n    float ambient = 0.1;\n    float diffuse = 0.5 * -dot(hit.normal, direction);\n    float specular = 1.1 * max(0.0, -dot(direction, reflect(direction, hit.normal)));\n    \n    color *= vec3(ambient + diffuse + pow(specular, 5.0));\n    color *= (1.0-(hit.steps / float(MAX_STEPS)));\n\t\n    //Fog / haze\n    float sky = smoothstep(MAX_DIST - 1.0, 0.0, hit.dist);\n    float haze = clamp(0.5/(hit.dist/MAX_DIST),0.0,1.0);\n    \n    vec3 skycol = mix(HAZE_COLOR, SKY_COLOR, clamp(-hit.position.z * 0.2, 0.0, 1.0));\n    \n    color = mix(skycol, color, sky * haze);\n    \n    return color;\n}\n\nvoid main( void )\n{\n\tvec2 res = resolution.xy / resolution.y;\n\tvec2 uv = gl_FragCoord.xy / resolution.y;\n\t\n\t//Camera stuff   \n\tvec3 angles = vec3(0);\n\t\n\t\n\t#ifdef DEMO_MODE\n\tangles.y = tau * (1.2 / 8.0);\n\tangles.x = time * 0.2;\n\t#else \n\tangles = vec3((mouse.xy) * pi, 0);\n\tangles.xy *= vec2(2.0, 1.0);\n\t#endif\n\t\n\tangles.y = clamp(angles.y, 0.0, 13.0 * tau / 64.0);\n\t\n\tmat3 rotate = Rotate(angles.yzx);\n\t\n\tvec3 orig = vec3(0, 0,-2) * rotate;\n\t\n\t#ifdef FLY_MODE\n\torig -= vec3(0, time, 0);\n\t#else\n\torig -= vec3(0, 0, 0);\n\t#endif\n\t\n\tvec3 dir = normalize(vec3(uv - res / 2.0, 0.5)) * rotate;\n\t\n\t//Ray marching\n\tMarchResult hit = MarchRay(orig, dir);\n\t\n\t//Shading\n\tvec3 color = Shade(hit, dir, orig);\n\t\n\t#ifdef SHOW_RAY_COST\n\tcolor = mix(vec3(0,1,0), vec3(1,0,0), hit.steps / float(MAX_STEPS));\n\t#endif\n    \n\tgl_FragColor = vec4(color, 1.0);\n}", "user": "a8250a4", "parent": null, "id": "29031.1"}