{"code": "\n//---------------------------------------------------------\n// Shader:   GoldenDunes.glsl         2014 by Passion \n// https://www.shadertoy.com/view/Xls3R4\n//---------------------------------------------------------\n\n#ifdef GL_ES\n  precision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D texture; \n\n//---------------------------------------------------------\n\n// noise functions from https://www.shadertoy.com/view/XslGRr\nvec2 hash( vec2 p ) {                       // rand in [-1,1]\n    p = vec2( dot(p,vec2(127.1,311.7)),\n              dot(p,vec2(269.5,183.3)) );\n    return -1. + 2.*fract(sin(p+20.)*53758.5453123);\n}\nfloat noise( in vec2 p ) {\n    vec2 i = floor((p)), f = fract((p));\n    vec2 u = f*f*(3.-2.*f);\n    return mix( mix( dot( hash( i + vec2(0.,0.) ), f - vec2(0.,0.) ), \n                     dot( hash( i + vec2(1.,0.) ), f - vec2(1.,0.) ), u.x),\n                mix( dot( hash( i + vec2(0.,1.) ), f - vec2(0.,1.) ), \n                     dot( hash( i + vec2(1.,1.) ), f - vec2(1.,1.) ), u.x), u.y);\n}\n\nfloat distanceFunction(vec3 p)\n{\n  vec4 n = vec4(0.0,1.0,0.0,1.0); \n//  float disp = .3*sin(.4*p.z)*sin(p.x+noise(p.zx))*2.5;\n  float disp = .3*sin(1.4*p.x+cos(p.z*1.3))-(1.0-abs(sin(p.x+noise(p.zx))))*.4;  // rigged\n//  float disp = .5*sin(.4*p.z)-(1.0-abs(sin(p.x+noise(p.zx))))*0.5;\n  float plane = dot(p,n.xyz) + n.w;\n  return (plane+disp);\n}\n \nvec3 getNormal(vec3 p)\n{\n  const float d = 0.0001;\n  return\n    normalize\n    (\n      vec3\n      (\n        distanceFunction(p+vec3(d,0.0,0.0))-distanceFunction(p+vec3(-d,0.0,0.0)),\n        distanceFunction(p+vec3(0.0,d,0.0))-distanceFunction(p+vec3(0.0,-d,0.0)),\n        distanceFunction(p+vec3(0.0,0.0,d))-distanceFunction(p+vec3(0.0,0.0,-d))\n      )\n    );\n}\n \nvoid main() {\n  vec2 pos = (gl_FragCoord.xy*2.0 -resolution) / resolution.y;\n  vec3 bg = mix(vec3(0.0,0.0,0.9*pos.y),vec3(1.5),.3);  \n\n  vec3 camPos = vec3(sin(time*.1)*20., -.2, 3.0-time);\n  vec3 camDir = vec3(.3, -0.2, -1.0);\n  vec3 camUp = vec3(0.0, 1.0, 0.0);\n  vec3 camSide = cross(camDir, camUp);\n  float focus = 1.8;\n  vec3 col = vec3(0.0);\n  vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*focus);\n  \n  float t = 0.0, d;\n  vec3 posOnRay = camPos;\n \n  for(int i=0; i<64; ++i)\n  {\n    d = distanceFunction(posOnRay);\n    t += d;\n    posOnRay = camPos + t*rayDir;\n  }\n    \n  vec4 tex = texture2D(texture, posOnRay.xz*1.5);\n  vec3 l = vec3(sin(time),20.,-20.);\n  vec3 normal = getNormal(posOnRay);\n  \n    if(abs(d) < 0.5)\n  {\n    float diff = dot(normal,normalize(l));\n    float spe = 1.5*pow(clamp(dot(reflect(rayDir, normal), l), 0., 1.), 150.);\n    vec3 brdf = 1.5*vec3(.10, .11, .11);\n    float fre = .2*pow(clamp(1. + dot(normal, rayDir), 0., 1.), 2.);\n    brdf += 1.30*diff*vec3(1., .9, .75);\n    col=diff*vec3(.8,.6,.3)*spe*brdf+fre*tex.rgb;\n    gl_FragColor = vec4(mix(col,bg,smoothstep(.1,.2,t*.015)),1.0);\n  }else\n  {\n    gl_FragColor = vec4(bg,1.0);\n  }\n}", "user": "4168bdb", "parent": null, "id": "22630.0"}