{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define res resolution\n\n// mini raymarcher based on https://www.shadertoy.com/view/4dtfRs\n\n// 2018-05-19\n\nfloat sphere_sdf(vec3 p, float radius) \n{\n  return length(p) - radius;\n}\n\nfloat roundedCube_sdf(vec3 p, vec3 dim) \n{\n  return length(max(abs(p)- dim, 0.0));\n}\n\nfloat torus_sdf(vec3 p) \n{\n  vec2 q = vec2(length(p.xz) - 0.9, p.y);\n  return length(q) - 0.1;\n}\n\nmat3 rotateX(float a) \n{\n  return mat3(\n    1.0, 0.0, 0.0,\n    0.0, cos(a), sin(a),\n    0.0, -sin(a), cos(a));\n}\n\nmat3 rotateY(float a) \n{\n  return mat3(\n    cos(a), 0.0, sin(a),\n    0.0, 1.0, 0.0,\n    -sin(a), 0.0, cos(a));\n}\n\nmat3 rotateZ(float a) \n{\n  return mat3(\n    cos(a), sin(a), 0.0,\n    -sin(a), cos(a), 0.0,\n    0.0, 0.0, 1.0);\n}\n\nfloat trace(vec3 o, vec3 r, mat3 tf, inout vec3 color) \n{\n    float t = 0.0,d1,d2,d;\n    vec3 dim = vec3(0.2, 0.75, 2.0);\n    for (int i = 0; i < 32; i++) \n    {\n    \tvec3 p = o + r * t;\n        d1 = roundedCube_sdf(tf * p, dim)-0.12;\n        d2 = 1.8*sphere_sdf(p, 1.2);\n        d = 0.9*mix(d1,d2, (mouse.x-.5)*2.);\n        t += d * 0.95;\n    }\n    if (d1 < d2) color = vec3(1, 0.6, 0); else color = vec3(0, 1, 0.8);\n//    color = (d2*vec3(1,0.6,0) + d1*(vec3(0,1,0.8))) / (d1+d2);    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{    \n    float atime = 0.2*time;\n    \n    vec2 ratio = vec2(res.x / res.y, 1.0);\n    vec2 uv = ratio * (2.0*(fragCoord / res.xy) -1.0);\n    vec2 mp = ratio * (2.0*(mouse) -1.0);\n\n    vec3 p = vec3(uv, 0.0) + vec3(0.0, 0.0, 1.4);\n    \n    vec3 l = vec3(uv, 0.0) + vec3(mp, 3.0);\n    vec3 n = normalize(p);\n    \n    vec3 lp = normalize(l - p);\n    vec3 lc = vec3(dot(lp, n));\n    vec3 color = vec3(1.0, 0.0, 0.0);\n    \n    vec3 r = normalize(p);\n    vec3 o = vec3(0.0, 0.0, -4.0);\n    \n    float t = trace(o, r, rotateZ(atime) * rotateY(time), color);\n   \n    float fog = 1.0 / (1.0 + t*t *0.1);\n    \n    color.b *= fog;\n    vec3 fc = vec3(fog * lc * color);\n    \n    fragColor = vec4(fc, 1.0);\n}\n\nvoid main( void ) \n{\n    mainImage (gl_FragColor, gl_FragCoord.xy);\n}", "user": "8dacf50", "parent": "/e#47056.4", "id": 47058}