{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n\n// Bonzomatic's default shader translated to glsl sandbox format\n\n\nfloat fGlobalTime = time; // in seconds\nvec2 v2Resolution = resolution; // viewport resolution (in pixels)\n\nvec4 out_color;\n           \nvec4 plas( vec2 v, float time )\n{\n      float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n      return vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .5) * .25, 1.0 );\n}\n\nvoid main(void)\n{\n      vec2 uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);\n      uv -= 0.5;\n      uv /= vec2(v2Resolution.y / v2Resolution.x, 1);\n    \n      vec2 m;\n      m.x = atan(uv.x / uv.y) / 3.14;\n      m.y = 1. / length(uv) * .2;\n      float d = min(m.y, length(uv.y));\n    \n      float f = sin(time*3.) * .2 + sin(mod(mouse.y * 5., 1.) + mod(mouse.x * 19., 2.0)) * 0.2; // texture( texFFT, d ).r * 100.;\n      m.x += sin( time) * 0.1;\n      m.y += min((time * 0.0001), time-d);\n    \n      vec4 t = plas( m * 3.14, time-m.y ) / d;\n      t = clamp( t-(d*sin(time)), 0.1, 1.0 );\n      out_color = f + t;\n\t \n      gl_FragColor = out_color;\n}", "user": "d4731ad", "parent": "/e#47092.0", "id": 47105}