{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nmat3 translate(vec2 v) {\n\treturn mat3(\n\t\t1., 0., 0.,\n\t\t0., 1., 0,\n\t\t-v.x, -v.y, 1.\n\t);\n}\n\nmat3 rotate(float a) {\n\treturn mat3(\n\t\tcos(a), -sin(a), .0,\n\t\t-sin(a), cos(a), 0.,\n\t\t0., 0., 1.\n\t);\t\n}\n\nfloat sinp(float a) { return 0.5 + 0.5 * sin(a); }\n\nvoid main( void ) {\n\tvec3 st = vec3(gl_FragCoord.xy / resolution, 1.0);\n\tvec2 aspect = vec2(resolution.x / resolution.y, 1.0);\n3.14150;\n\tst.xy -= 1.0;\n\tst.xy *= aspect;\n\tst = translate(mouse * 2.0 - 1.) * st;\n\t\n\tvec3 col;\n\t\n\tfloat t = time;\n\t\n\tfor (int i = 0; i < 3; i++) {\n\t\tt += (sin(time + (2. + 10. * mouse.x) * length(st) + atan(st.y, st.x) * 5.)\n\t\t     * sin(time + (2. + 10. * mouse.y) * length(st) - atan(st.y, st.x) * 5.)\n\t\t     );\n\t\tfloat c = sin(5. * t - length(st.xy) * 10. * sinp(t));\n\t\tcol[i] = c;\n\t}\n\t\n\t\n\t\n\tgl_FragColor = vec4(vec3(1.0, 0., col.g) * col, 1.0);\n}", "user": "be82d64", "parent": "/e#47243.10", "id": 47269}