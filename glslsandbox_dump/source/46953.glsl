{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives: enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nvarying vec2 surfacePosition;\n\nfloat noise(vec2 p) {\n  return fract(sin(p.x + p.y * 10000.) * 10000.);\n}\n\nvec2 sw(vec2 p) {\n  return vec2(floor(p.x), floor(p.y));\n}\nvec2 se(vec2 p) {\n  return vec2(ceil(p.x), floor(p.y));\n}\nvec2 nw(vec2 p) {\n  return vec2(floor(p.x), ceil(p.y));\n}\nvec2 ne(vec2 p) {\n  return vec2(ceil(p.x), ceil(p.y));\n}\n\nfloat smoothNoise(vec2 p) {\n  vec2 interp = smoothstep(0., 1., fract(p));\n  float s = mix(noise(sw(p)), noise(se(p)), interp.x);\n  float n = mix(noise(nw(p)), noise(ne(p)), interp.x);\n  return mix(s, n, interp.y);\n}\n\nfloat fractalNoise(vec2 p) {\n  float x = 0.;\n  x += smoothNoise(p);\n  x += smoothNoise(p * 2.) / 2.;\n  x += smoothNoise(p * 4.) / 4.;\n  x += smoothNoise(p * 8.) / 8.;\n  x += smoothNoise(p * 16.) / 16.;\n  x /= 1. + 1. / 2. + 1. / 4. + 1. / 8. + 1. / 16.;\n  return x;\n}\n\nfloat movingNoise(vec2 p) {\n  float x = fractalNoise(p + time);\n  float y = fractalNoise(p - time);\n  return fractalNoise(p + vec2(x, y));\n}\n\nfloat nestedNoise(vec2 p) {\n  float x = movingNoise(p);\n  float y = movingNoise(p + 100.);\n  return movingNoise(p + vec2(x, y));\n}\n\nvoid main(void) {\n  vec2 position = gl_FragCoord.xy / resolution.xy + surfacePosition;\n \n  position.x += time / 3.0;\n  //position.y += sin(time - position.x * 2.0) / (mouse.x * 50.0 + 5.0);\n\n  vec3 c1 = vec3(.4, .6, 1.);\n  vec3 c2 = vec3(.1, .2, 1.);\n\t\n    gl_FragColor = vec4(0.5, 0.75, 1., 1.0);\n\tfor(int i=0;i<20;i++){\n\t\tfloat q=(float(i)/4.0)+0.3;\n\t\t/**/ if (position.y-1.0 < (-abs(nestedNoise(vec2(position.x,1.0*q))) -1.0)/(1.0+q)){\n    gl_FragColor = vec4(mix(c1 * 3.0/(q+2.0), c2 * 3.0/(q+1.0), nestedNoise(position * q)), 1.);\n\t\tbreak;\n\t\t}\n\t\t\n\t}\n}", "user": "b2f8086", "parent": "/e#46949.8", "id": 46953}