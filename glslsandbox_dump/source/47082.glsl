{"code": "#ifdef GL_ES\nprecision highp float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\nconst int steps=50;\nconst float threshold=0.01;\nconst int slices=4;\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D backbuffer;\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nvec2 cpow(vec2 b,float p){\n\tvec2 polar=vec2(pow(length(b),p),atan(b.y,b.x)*p);\n\tvec2 rect=vec2(cos(polar.x),sin(polar.x))*polar.y;\n\treturn rect;\n}\nvec2 m(vec2 a,vec2 b){\n\treturn vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);\n}\nvec2 aT(vec2 i,vec2 z){\n\treturn vec2(0.0,-1.0)+m(i,z);\n}\nvec2 bT(vec2 i,vec2 z){\n\treturn vec2(0.0,1.0)-m(i,z);\n}\nfloat cubeSD(vec4 pt,float s){\n  return max(max(abs(pt.x),abs(pt.y)),max(abs(pt.z),abs(pt.w)))-s;\n}\nfloat sphereSD(vec4 pt,float s){\n  return length(pt)-s;\n}\nfloat unionSD(float a,float b){\n  return min(a,b);\n}\nfloat subSD(float a,float b){\n  return max(a,-b);\n}\nfloat DE(vec4 z)\n{\n\tvec4 a1 = vec4(1,1,1,1);\n\tvec4 a2 = vec4(-1,-1,1,1);\n\tvec4 a3 = vec4(1,-1,-1,1);\n\tvec4 a4 = vec4(-1,1,-1,1);\n\tvec4 a5 = vec4(1,1,1,-1);\n\tvec4 a6 = vec4(-1,-1,1,-1);\n\tvec4 a7 = vec4(1,-1,-1,-1);\n\tvec4 a8 = vec4(-1,1,-1,-1);\n\tvec4 c;\n\tfloat dist, d;\n\tfloat Scale=2.0;\n\tfor(int n=0;n<10;n++){\n\t\t c = a1; dist = length(z-a1);\n\t        d = length(z-a2); if (d < dist) { c = a2; dist=d; }\n\t\t d = length(z-a3); if (d < dist) { c = a3; dist=d; }\n\t\t d = length(z-a4); if (d < dist) { c = a4; dist=d; }\n\t\t d = length(z-a5); if (d < dist) { c = a5; dist=d; }\n\t\t d = length(z-a6); if (d < dist) { c = a6; dist=d; }\n\t\t d = length(z-a7); if (d < dist) { c = a7; dist=d; }\n\t\tz = Scale*z-c*(Scale-1.0);\n\t}\n\n\treturn length(z) * pow(Scale, float(-10));\n}\nfloat sceneSD(vec4 pt){\n\treturn DE(pt);//max(sphereSD(pt-vec4(0.0,0.0,0.0,0.0),0.5),cubeSD(pt-vec4(0.0,0.0,0.0,0.0)-vec4(0.5),0.5));\n  /*return min(min(cubeSD(pt,1.0),cubeSD(pt-vec4(0.0,-4.0,0.0,0.0),0.5)),\n  max(sphereSD(pt-vec4(0.0,-2.0,0.0,0.0),0.5),cubeSD(pt-vec4(0.0,-2.0,0.0,0.0)-vec4(0.5),0.5))\n  );*/\n}\nvoid main( void ) {\n\n\tvec2 position = (( gl_FragCoord.xy / resolution.xy )-vec2(0.5))*resolution.xy/resolution.y*1.0;\n\tvec2 screen=floor(position);\n\t//position=mod(position+vec2(1.0),vec2(2.0))-vec2(1.0);\n  vec3 totColor=vec3(0.0);\n  //for(int i=-slices;i<=slices;i++){\n      vec2 voxelScreen=vec2(position.x,position.y);\n      \n      vec4 pos=normalize(vec4(sin(time),cos(time*5.0),-7.0*sin(time*2.0),10.0*cos(time*3.0)))*20.0;\n\t  vec4 up=vec4(0.0,1.0,0.0,0.0);\n\t  vec4 right=vec4(1.0,0.0,0.0,0.0);\n\t  vec4 ray=normalize(-pos);\n\t  ray=normalize(ray+ray.zwyx*normalize(vec4(-sin(mouse.x),sin(mouse.x),-cos(mouse.x),cos(mouse.x)))*position.y+ray.wzxy*normalize(vec4(sin(mouse.x),sin(mouse.x),cos(mouse.x),cos(mouse.x)))*position.x);\n      vec3 color=vec3(0.0,0.0,0.0);\n      bool hit=false;\n      for(int r=0;r<steps;r++){\n        float d=sceneSD(pos);\n\n        if(sceneSD(pos)<threshold){\n          color=hsv2rgb(vec3((mod(pos.x,1.0)+mod(pos.y,1.0)/2.0+mod(pos.z,1.0)/4.0+mod(pos.w,1.0)/8.0)/2.0,1.0,0.5));//vec3(sin(pos.x)/2.0+0.5,sin(pos.w)/2.0+0.5,(sin(pos.y)/2.0+0.5+cos(pos.z)/2.0+0.5)/2.0);\n          hit=true;\n          break;\n        }\n        pos+=ray*d;\n      }\n      if(hit){\n        totColor+=color/1.0;//(1.0+2.0*float(slices));\n        //break;\n      }\n  //}\n\t\tgl_FragColor=vec4(totColor,1.0);\n\n\n}\n", "user": "b2f8086", "parent": null, "id": 47082}