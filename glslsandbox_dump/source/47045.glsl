{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n//Animated Steam logo using 2D distance fields\n\n//Settings\nfloat speed = 30.6;\nfloat armLength = 0.70;\nfloat rodLength = 0.7;\nfloat pivotSize = 0.10;\nfloat axleSize = 0.15;\n\n//Colors\nvec3 bgTop = vec3(0.35);\nvec3 bgBottom = vec3(0.05);\n\nvec3 logoTop = vec3(0.4);\nvec3 logoBottom = vec3(0.9);\n\nmat2 Rotate(float angle);\nfloat AngleBetween(vec2 v1,vec2 v2);\nfloat Reciprocate(float ca,float cr,float rl);\nfloat Lerp(float low,float high,float amount);\nfloat Circle(float rad,vec2 pos);\nfloat Square(float rad,vec2 pos);\nfloat Rectangle(vec2 size,vec2 pos);\n\nvoid main( void ) {\n\n\tvec2 aspect = vec2(resolution.x/resolution.y,1.0);\n\tvec2 position = ( gl_FragCoord.xy / resolution.y );\n\t\n\tvec2 center = aspect / 2.0;\n\t\n\tfloat angle = -time*speed;\n\t\n\tfloat scene = 0.0;\n\t\n\tvec2 transform = vec2(0);\n\t//Axle\n\tvec2 axlePos = center - vec2(-0.3,0);\n\ttransform = position - axlePos;\n\t\n\tvec2 armDomain = transform*Rotate(angle);\n\t\n\tfloat taper = Lerp(axleSize*1.7,pivotSize,-(armDomain.x/armLength));\n\t\n\tarmDomain = (armDomain - vec2(-armLength/2.0,0));\n\t\n\tscene = min(scene,Rectangle(vec2(armLength,taper),armDomain));\n\t\n\tscene = min(scene,Circle(axleSize,transform));\n\tscene = max(scene,-Circle(axleSize-0.05,transform));\n\tscene = min(scene,Circle(axleSize-0.07,transform));\n\t\n\t//Crank\n\tvec2 crankPos = axlePos - vec2(armLength,0) * Rotate(-angle);\n\ttransform = position - crankPos;\n\t\n\tscene = min(scene,Circle(pivotSize,transform));\n\tscene = max(scene,-Circle(pivotSize-0.03,transform));\n\tscene = min(scene,Circle(pivotSize-0.045,transform));\n\t\n\t//Piston\n\tvec2 pistonPos = axlePos - vec2(Reciprocate(angle,armLength,rodLength),0);\n\t\n\ttransform = position -pistonPos; \n\t\n\tscene = min(scene,Circle(pivotSize,transform));\n\tscene = max(scene,-Circle(pivotSize-0.03,transform));\n\tscene = min(scene,Circle(pivotSize-0.045,transform));\n\t\n\t//Push Rod\n\tvec2 rodPos = pistonPos;\n\t\n\ttransform = (position  - rodPos) * Rotate(-AngleBetween(crankPos,pistonPos));\n\ttransform = transform - vec2(rodLength/2.0,0);\n\t\n\tscene = min(scene,Rectangle(vec2(rodLength,(pivotSize-0.045)*2.0-0.01),transform));\n\t\n\t//Shading\n\tfloat blend = smoothstep(0.0,0.002,-scene);\n\t\n\tvec3 background = mix(bgBottom,bgTop,position.y);\n\tbackground *= abs(sin((position.x + position.y)*400.0));\n\t\n\tvec3 shade = mix(logoBottom,logoTop,position.y);\n\t\n\tvec3 color = mix(background,shade,blend);\n\t\n\tgl_FragColor = vec4( vec3(color), 1.0 );\n\n}\n\n//Shapes\nfloat Circle(float rad,vec2 pos)\n{\n\treturn length(pos)-rad;\n}\n\nfloat Square(float rad,vec2 pos)\n{\n\treturn max(abs(pos.x),abs(pos.y))-rad;\n}\n\nfloat Rectangle(vec2 size,vec2 pos)\n{\n\treturn length(pos-clamp(pos,-size/2.0,size/2.0)) - 0.005;\n}\n\n//Math Functions\n//Creates a 2D rotation matrix for the given angle\nmat2 Rotate(float angle)\n{\n\treturn mat2(cos(angle),-sin(angle),\n\t\t    sin(angle), cos(angle));\n}\n\n//Angle between two 2D vectors\nfloat AngleBetween(vec2 v1,vec2 v2)\n{\n\treturn atan(v1.y-v2.y,v1.x-v2.x);\n}\n\n//Reciprocating motion\n//ca = Crank Angle\n//cr = Crank Radius\n//rl = Push Rod Length\nfloat Reciprocate(float ca,float cr,float rl)\n{\n\treturn cr * cos(ca) + sqrt(rl*rl - pow(cr * sin(ca),2.0));\n}\n\n//Linearly interpolates between two numbers by the amount\nfloat Lerp(float low,float high,float amount)\n{\n\treturn clamp(low + (high - low) * amount,0.0,1.0);\n}", "user": "d4731ad", "parent": "/e#37102.0", "id": 47045}