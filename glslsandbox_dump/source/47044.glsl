{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n\nvec2 v2Resolution = resolution; // viewport resolution (in pixels)\nfloat fGlobalTime = time;\n\n\nconst float hit = 0.001;\n\nfloat sphere(vec3 p, vec3 c, float r)\n{\n  return distance(p, c) - r;\n}\n\n\nfloat df(vec3 p)\n{\n  float d = 999990.0;\n  for (float i= 0.0; i<5.0; i+=1.0) {\n     float r=5.0, t=fGlobalTime+i, x=sin(t)*r, y=sin(t*2.7)*2.0,  z=cos(t)*r;\n     d = min(\n           d, \n           sphere(p, vec3(x, y, z + 25.0 + sin(fGlobalTime)*2.0), 2.0)\n         );\n  }\n  return d;\n}\n\n vec3 lipo = vec3(2.0 + sin(fGlobalTime)*2.0, 20.0, -3.0),\n      lico = vec3(1.0, 0.8, sin(fGlobalTime*3.0)*0.5 + 0.5);\n\n\nvoid main(void)\n{\n  vec2 uv = vec2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);\n  uv -= 0.5;\n  uv /= vec2(v2Resolution.y / v2Resolution.x, 1);\n\n fGlobalTime += (gl_FragCoord.y / v2Resolution.y) * (3.0 + sin(time));\n\t\n  vec3 ro = vec3(0.0), sp=vec3(uv, 2.5);\n  vec3 rd = normalize(sp-ro);\n\n  vec3 p = ro;\n  vec3 l = vec3(0.0);\n  float contr = 1.0;\n  for (float i=0.0; i<109.0; i+=1.0) {\n    float d = df(p);\n\t  \n    if (d < 0.0) { p += rd * d; d = 0.0; }\n\t  \n    if (d < hit) {\n      vec3 ld = normalize(p - lipo);\n      vec3 eps3 = vec3(0.0001, 0.0, 0.0);\n      vec3 norm = normalize(vec3(df(p-eps3.xyy), df(p-eps3.yxy), df(p-eps3.yyx)));\n\n      l = l * (1.0 - contr) + (vec3(1.0, 0.0, 0.0) * i / 100.0 \n             + dot(ld, norm) * lico) * contr;\n      contr *= 0.9;  \n\n      if (contr < 0.1) \n        break;\n      rd = reflect(rd, norm);\n      p += rd * 0.01;\n    }\n\telse\n    p += d * rd * 0.3;\n  }\n\n  gl_FragColor = vec4(l, 0.0);\n}", "user": "af9b7", "parent": "/e#47043.0", "id": 47044}