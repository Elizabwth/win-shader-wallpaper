{"code": "//pastel psx/dreamcast thingy\n// @samloeschen\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define M_PI 3.1415926535897932384626433832795\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d   \n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nbool boxtest (in vec2 p, in vec2 square, in float w) {\n    return p.x - w < square.x && p.x + w > square.x && p.y - w < square.y && p.y + w > square.y;\n}\n\nvec3 palette (in float t) {\n    vec3 a = vec3(0.93,0.43,0.76);\n    vec3 b = vec3(0.90,0.31,0.24);\n    vec3 c = vec3(0.41,0.93,1.0);\n    vec3 d = vec3(0,0.44,0.32);\n    return a + b*cos( 2.0*M_PI*(c*t+d) );\n}\n\nvec3 drawSquare (in vec2 p, in vec2 square, in vec3 setting) {\n    if(boxtest(p, square, setting.x) && !(boxtest(p, square, setting.x - setting.y))) \n        return palette(setting.z / 70.0 + time * 0.1);\n\n    return vec3(0.0);\n}\n\nvoid main (void) {\n    vec2 uv = (gl_FragCoord.xy / resolution.xy);\n    vec2 aspect = resolution.xy / min(resolution.x, resolution.y);\n    vec2 center = vec2(0.5);\n    vec2 pos = uv - center;\n    float horizon = 0.03*cos(time); //lil motion here\n    float fov = -0.5; //if we negate fov the box has a better palette relationship with the planes\n\n    vec3 p = vec3(pos.x, fov, pos.y - horizon);\n    float scroll = (time * -sign(p.z));\n    float bump = noise((vec2(p.x + 100., p.y) * 20.)) * 0.1;\n    vec2 s = vec2(p.x/p.z, p.y/p.z + bump + scroll) * 0.1; //actual plane position\n\n    bool grid = (fract(s.y / 0.02) > 0.95) || (fract(s.x / 0.02) > 0.95);\n    vec3 gridColor = (mix(palette(s.y + bump * 0.5), vec3(1.0), float(grid)));\n    gridColor = mix(gridColor, vec3(1.0), 0.3); //slight desaturate and boost\n    float fog = pow(sin(uv.y * M_PI), 5.);\n    vec3 color = mix(gridColor, vec3(1.0), fog);\n\n    float a = sin(time) * 0.6; //box angle\n    mat2 rot = mat2(cos(a), -sin(a), sin(a), cos(a));\n    pos = uv * aspect * rot; \n    center *= aspect * rot;\n    \n    for(int i = 0; i < 50; i++) {\n        vec3 d = drawSquare(pos, center + vec2(sin(float(i) / 10.0 + time) / 4.0, 0.0), vec3(0.0 + sin(float(i) / 200.0), 0.01 , float(i)));\n        if(d.x > 0.) color = mix(d, vec3(1.0), 0.3); //slight desaturate and boost\n    }\n    gl_FragColor = vec4(color, 1.0);\n}", "user": "6fc2f87", "parent": null, "id": 47234}