{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 resolution;\n\n\nvec2 iResolution;\nfloat iTime;\n\n#define repeat(v) mod(p + 1., 2.) -1.\n#define un(a, b) min(a, b)\n\nmat3 rotateX(float a) {\n\treturn mat3(\n    \t1.0, 0.0, 0.0,\n        0.0, cos(a), sin(a),\n        0.0, -sin(a), cos(a)\n    );\n}\n\nmat3 rotateY(float a) {\n\treturn mat3(\n    \tcos(a), 0.0, sin(a),\n        0.0, 1.0, 0.0,\n        -sin(a), 0.0, cos(a)\n    );\n}\n\nfloat sphere_sdf(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat cube_sdf(vec3 p, float s) {\n\treturn length(max(abs(p) - s, .0));\n}\n\nfloat ring_sdf(vec3 p) {\n\tfloat a = sphere_sdf(p + vec3(.2, .0, .0), .1);\n    float b = sphere_sdf(p + vec3(-.2, .0, .0), .1);\n    float A = un(a, b);\n    float c = sphere_sdf(p + vec3(.0, .0, .1), .1);\n    float d = sphere_sdf(p + vec3(.0, .0, -.1), .1);\n    float B = un(c, d);\n    return un(A, B);\n}\n\nfloat shape_sdf(vec3 p) {\n    vec3 v = rotateY(iTime) * p;\n    v.y = mod(v.y + 0.2, 0.4) - 0.2;\n    return un(ring_sdf(v), \n              sphere_sdf(p * vec3(1., .01, 1.), .11));\n    \n}\n\n\nvoid mainImage(out vec4 O, in vec2 I) {\n    \tvec2 R = iResolution.xy;\n\tvec2 uv = (2. * I - R) / R.y;\t\n\tvec3 o = vec3(-1., 0., iTime), d  = vec3(uv, 1.), p;\n\tfloat t = 0.;\n\tfor (int i = 0; i < 32; i++) {\n\t\tp = o + d * t;\n        p = repeat(p);\n\t\tt += .5 * shape_sdf(p);\n\t}\n\tfloat l = .8 * dot(normalize(o - p), d);\n\tO = vec4(.5 * vec3(0., uv.y, uv.y) + vec3(.0, .3, 1.) * l  * vec3(t * .3), 1.);\n}\t\n\nvoid main(void) {\n\tiResolution = resolution;\n\tiTime = time;\n\tmainImage(gl_FragColor, gl_FragCoord.xy);\n}\n", "user": "ed23b80", "parent": null, "id": 47395}