{"code": "#ifdef GL_ES\nprecision lowp float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define DERIV_DIF 0.01\n\nstruct surface_data\n{\n\tfloat depth;\n\tvec3 normal; \n};\n\nfloat nsin(float x) { return (sin(x) + 1.) / 2.; }\nfloat ncos(float x) { return (cos(x) + 1.) / 2.; }\n\t\nfloat getDepth(vec2 p)\n{\n\tp.x += sin(p.y*12. + p.x + time*2.)*0.01;\n\t\n\tp.y += cos(p.x + p.y + time) * 0.1;\n\t\n\tfloat l = length(p);\n\tfloat val = sin(l * 20. + time) + cos(l * 17. + time*2.) + sin(p.x*p.y + time);\n\n\treturn val;\n\t//p *= 6.;\n\t//float a0 = sin(p.x * p.y/2.\t+ cos(p.x * p.y - time));\n\t//float a1 = sin(cos(p.x/2.) + sin(p.y));\n\t\n\t//return 0.1*abs(a0 - a1);\n}\n\nsurface_data getSurface(vec2 p){\n\tfloat depth = getDepth(p);\n\t\n\treturn surface_data(\n\t\tdepth, \n\t\tnormalize(cross(\n\t\t\tvec3(DERIV_DIF, 0, getDepth(p + vec2(DERIV_DIF, 0)) - depth), \n\t\t\tvec3(0, DERIV_DIF, getDepth(p + vec2(0, DERIV_DIF)) - depth)\n\t\t))\n\t);\n}\n\nvec3 getColorAt(vec2 p)\n{\n\tvec3 color = vec3(0.9, 0.6, 0.2);\n\t\n\tsurface_data surface = getSurface(p);\n\tvec3 light_dir = normalize(vec3(1,1,-1));\n\t\n\tvec3 light_pos = vec3(p + vec2(cos(time), sin(time)), 0);\n\t\n\t//vec3 light_pos = vec3((mouse-.5), 1.);\n\t//light_pos.x *= resolution.x / resolution.y;\n\t\n\tcolor += vec3(1, 1, 1) * abs(dot(reflect(light_dir, surface.normal), light_pos));\n\tcolor += vec3(1, 1, 1) * dot(light_dir, surface.normal);\n\t//color += vec3(.2, .2, 0.2) * surface.depth;\n\t//color += vec3(1, 0, 0) * surface.dx;\n\t//color += vec3(0, 0, 1) * surface.depth;\n\t\n\treturn color;\n}\n\nvoid main( void ) {\n\n\tvec2 pos = (gl_FragCoord.xy / resolution)-.5;\n\tpos.x *= resolution.x / resolution.y;\n\t\n\tgl_FragColor = vec4(getColorAt(pos), 1);\n\n}", "user": "97e4020", "parent": "/e#41029.0", "id": 47476}