{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nvarying vec2 surfacePosition;\n\nfloat ltime;\n// example Liquid_Spectrum\n// from https://www.shadertoy.com/view/4sjXRG\n\nfloat noise(vec2 p)\n{\n  return sin(p.x*10.) * sin(p.y*(3. + sin(ltime/11.))) + .2; \n}\n\nmat2 rotate(float angle)\n{\n  return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat fbm(vec2 p)\n{\n  p *=0.8;\n  float f = 0.3;\n  float amp = .5;\n  for( int i = 0; i < 3; i++) {\n    mat2 modify = rotate(ltime/50. * float(i*i));\n    f += amp*noise(p);\n    p = modify * p;\n    p *= 2.;\n    amp /= 1.5;\n  }\n  return f;\n}\n\nfloat pattern(vec2 p, out vec2 q, out vec2 r) \n{\n  q = vec2( fbm(p + vec2(1.)),\n\t    fbm(rotate(.1*ltime)*p + vec2(3.)));\n  r = vec2( fbm(rotate(.2)*q + vec2(0.)),\n\t    fbm(q + vec2(0.)));\n  return fbm(p + 1.*r);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n  vec4 K = vec4(1.0, 3.0 / 3.0, 3.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main( void ) \n{\n  vec2 p = 0.5 + surfacePosition.xy * 0.4;\n  ltime = time;\n  float ctime = time + fbm(p/8.)*40.;\n  float ftime = fract(ctime/6.);\n  ltime = floor(ctime/6.) + (1.-cos(ftime*3.1415)/2.);\n  ltime = ltime*6.;\n  vec2 q, r;\n  float f = pattern(p, q, r);\n  vec3 col = hsv2rgb(vec3(q.x/10. + ltime/100. + .4, abs(r.y)*3. + .1, r.x + f));\n  float vig = 1. - pow(4.*(p.x - .5)*(p.x - .5), 10.);\n  vig *= 1. - pow(4.*(p.y - .5)*(p.y - .5), 10.);\n  gl_FragColor = vec4(col*vig,0.1);\n}", "user": "b1d2fbd", "parent": "/e#46887.0", "id": 47089}