{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n\n/*\n\t2D Noise functions by Patricio Gonzalez Vivo\n*/\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 uv) {\n\tfloat a = 0.;\n\ta += noise(uv * 2.);\n\ta += noise(uv * 4.);\n\ta += noise(uv * 8.);\n\ta += noise(uv * 16.);\n\ta += noise(uv * 32.);\n\treturn a;\n}\t\n\nvoid main( void ) {\n\tvec2 uv = (2. * gl_FragCoord.xy - resolution) / min(resolution.x, resolution.y); \n\tvec3 color = vec3(1.);\n\tfloat l = 0.;\n\tl = (.01 + .01 * uv.y * fbm(vec2(time * 2., uv.y))) / abs(uv.x + .2 * fbm(vec2(time / 5., uv.y / 4.)));\n\tl += (.01 + .01 * uv.y * fbm(vec2(time, uv.y))) / abs(uv.x + .2 * fbm(vec2(time / 3., uv.y / 8.)));\n\tgl_FragColor = vec4(color * l, 1.); \n}", "user": "ed23b80", "parent": null, "id": 47512}