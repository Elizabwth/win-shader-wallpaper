{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n\n\n// Leon 05 / 07 / 2017\n// using lines of code of IQ, Mercury, LJ, Koltes, Duke\n\n#define PI 3.14159\t\n#define TAU\t\t(8.*atan(1.)) \t\n\n#define DITHER\n#define STEPS 50.\n#define BIAS 0.2\n#define DIST_MIN 0.01\n\nmat2 rot (float a) { float c=cos(a),s=sin(a);return mat2(c,-s,s,c); }\nfloat sphere (vec3 p, float r) { return length(p)-r; }\nfloat cyl (vec2 p, float r) { return length(p)-r; }\nfloat torus( vec3 p, vec2 s ) {\n    vec3 q = abs(p);\n    return max(q.z-s.y,max(q.x*0.866025+p.y*0.5,-p.y)-s.x*0.5);\n}\nfloat smin (float a, float b, float r) {\n    float h = clamp(.5+.5*(b-a)/r,0.,1.);\n    return mix(b,a,h)-r*h*(1.-h);\n}\nfloat rand(vec2 co) { return fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453); }\nvec3 camera (vec3 p) {\n    p.yz *= rot((PI*(mouse.y/resolution.y-.5)*step(0.5,mouse.x)));\n    p.xz *= rot((PI*(mouse.x/resolution.x-.5)*step(0.5,mouse.x)));\n    p.yz *= rot(-PI*.5);\n    return p;\n}\n\nfloat map (vec3 p) {\n    vec3 p1 = p;\n    float geo = 1.5;\n    float cy = 10.7;\n    const float repeat = 4.;\n    p1.xy *= rot(length(p)*.5);\n\t\t\n\t\n    float t = time*0.12;\n\t\n    for (float i = 0.; i < repeat; ++i) {\n        p1.yz *= rot(0.3+t*0.5);\n        p1.xy *= rot(0.2+t);\n        p1.xz *= rot(.15+t*2.);\n        \n       \tp1.xy *= rot(p.x*.5+t);\n        \n        geo = smin(geo, torus(p1,vec2(1.+i*.2,.02)), .5);\n        \n        geo = smin(geo, cyl(p1.xz,.04), .5);\n        \n        vec3 p2 = p1;\n        p2.y = mod(p2.y,cy)-cy/2.;\n        geo = smin(geo, torus(p2,vec2(.4,.01)), .2);\n    }\n    return geo;\n}\n\n\n\nvoid main( void ) {\n\n\t\n\t\n\tvec2 uv = (gl_FragCoord.xy-.5*resolution.xy)/resolution.y;\n    vec3 eye = camera(vec3(uv,-3));\n    vec3 ray = camera(normalize(vec3(uv,.5)));\n    vec3 pos = eye;\n    float shade = 0.;\n    #ifdef DITHER\n\tvec2 dpos = ( gl_FragCoord.xy / resolution.xy );\n\tvec2 seed = dpos + fract(time);\n\t#endif \n    for (float i = 0.; i < STEPS; ++i) {\n\t\tfloat dist = map(pos);\n        if (dist < BIAS) {\n            shade += 1.;\n        }\n        #ifdef DITHER\n        dist=abs(dist)*(.8+0.2*rand(seed*vec2(i)));\n        #endif \n        dist = max(DIST_MIN,dist);\n        pos += ray*dist;\n    }\n\t\n\tgl_FragColor = vec4(shade/(STEPS-1.),shade/time*STEPS,shade*time,1.);\n}\n", "user": "57f7a25", "parent": null, "id": 47247}