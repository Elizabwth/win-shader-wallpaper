{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nconst int MAX_MARCHING_STEPS =255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = .001;\n\n\n\n\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat smin(float a, float b, float k){\n\tfloat h = clamp(.5 + .5*(b-a)/k, .0, 1.);\n\treturn mix(b, a, h) - k*h*(1.-h);\n}\n\nfloat intersectSDF(float a, float b){\n\treturn max(a,b);\n}\n\nfloat unionSDF(float a, float b){\n\treturn min(a,b);\n}\n\nfloat differenceSDF(float a, float b){\n\treturn max(a,-b);\n}\nfloat cylinderSDF(vec3 p, float h, float r) {\n    // How far inside or outside the cylinder the point is, radially\n    float inOutRadius = length(p.xy) - r;\n    \n    // How far inside or outside the cylinder is, axially aligned with the cylinder\n    float inOutHeight = abs(p.z) - h/2.0;\n    \n    // Assuming p is inside the cylinder, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(inOutRadius, inOutHeight), 0.0);\n\n    // Assuming p is outside the cylinder, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(vec2(inOutRadius, inOutHeight), 0.0));\n    \n    return insideDistance + outsideDistance;\n}\nfloat sphereSDF(vec3 p, float radi){\n\treturn length(p) - radi;\n}\n\nfloat cubeSDF(vec3 p, float side){\n\tvec3 d = abs(p) - vec3(side,side,side);\n\t\n\tfloat inside = min(max(d.x, max(d.y, d.z)), 0.0);\n\tfloat outside = length(max(d, 0.0));\n\t\t\n\treturn inside + outside;\n}\n\nfloat capsuleSDF( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat tetrahedronSDF(vec3 p){\n\tvec3 v1 = vec3(1.,1.,1.);\n\tvec3 v2 = vec3(1.,-1.,-1.);\n\tvec3 v3 = vec3(-1.,1.,-1.);\n\tvec3 v4 = vec3(-1.,-1.,1.);\t\t\t\n\tfloat a;\n\ta = capsuleSDF(p, v1, v2, 0.12);\n\ta = unionSDF(a, capsuleSDF(p, v1, v3, 0.12));\n\ta = unionSDF(a, capsuleSDF(p, v1, v4, 0.12));\n\ta = unionSDF(a, capsuleSDF(p, v2, v3, 0.12));\n\ta = unionSDF(a, capsuleSDF(p, v2, v4, 0.12));\n\ta = unionSDF(a, capsuleSDF(p, v3, v4, 0.12));\n\treturn a;\n\n}\n\nfloat sceneSDF(vec3 p){\n\n\t\n\tfloat radi = 0.4;\t\n\t\n\tfloat sphere = cubeSDF(p, 0.4);\n\tsphere = unionSDF(sphere, sphereSDF(p, 0.4));\n\tsphere = unionSDF(sphere, sphereSDF(p, 0.4));\n\tsphere = unionSDF(sphere, sphereSDF(p, 0.4));\n\tp = rotateY(time)*p;\n\tfloat s = sphereSDF(p, radi);\n\t//kub = smin(kub, sphere,3.6);\n\treturn smin(sphere,tetrahedronSDF(p), 0.2);//unionSDF(kub,capsuleSDF(p, v1, v2, 0.12));\n}\n\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchDir, float start, float end){\n\tfloat depth = start;\n\tfor(int i = 0; i < MAX_MARCHING_STEPS; i++){\n\t\tfloat dist = sceneSDF(eye + depth * marchDir);\n\t\tif(dist < EPSILON){\n\t\t\treturn depth;\n\t\t}\n\t\tdepth += dist;\n\t\tif(depth >= end){\n\t\t\treturn end;\n\t\t}\n\t}\n\treturn end;\n}\n\nvec3 rayDirection(float fov, vec2 size, vec2 fragCoord){\n\tvec2 xy = fragCoord - size/2.0;\n\tfloat z  = size.y / tan(radians(fov) / 2.0);\n\treturn normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p){\n\treturn normalize(vec3(\n\t\tsceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n\t\tsceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n\t\tsceneSDF(vec3(p.x, p.y, p.z + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n\t));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(time),\n                          2.0,\n                          4.0 * cos(time));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * time),\n                          2.0 * cos(0.37 * time),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\nvoid main( void ) {\n\n\tvec3 viewDir = rayDirection(45.0, resolution.xy, gl_FragCoord.xy);\n\tvec3 eye = vec3(8.0,5.0,7.0);\n\t\n\tmat4 viewToWorld = viewMatrix(eye, vec3(0.,0.,0.), vec3(0.,1.,0.));\n\t\n\tvec3 worldDir = (viewToWorld * vec4(viewDir, 0.)).xyz;\n\t\n\tfloat dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n\t\n\tif(dist > MAX_DIST - EPSILON){\n\t\tgl_FragColor = vec4(0.0,0.0,0.0,1.0);\t\n\t\treturn;\n\t} else if(dist < 11.){\n\t\tgl_FragColor=vec4(0.0,0.0,.0,1.);\n\t\treturn;\n\t}\n\t// The closest point on the surface to the eyepoint along the view ray\n\tvec3 p = eye + dist * worldDir;\n\tvec3 K_a = vec3(0.2, 0.2, 0.2);\n\tvec3 K_d = vec3(0.7, 0.2, 0.2);\n\tvec3 K_s = vec3(1.0, 1.0, 1.0);\n\tfloat shininess = 10.0;\n\t    \n\tvec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n\tgl_FragColor = vec4(color,1.0);\n\n}", "user": "b0c9a29", "parent": null, "id": 47295}