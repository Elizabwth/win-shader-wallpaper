{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 resolution;\n\nvec2 position(float z) {\n    return vec2(\n        0.0 + sin(z * 0.1) * 1.0 + sin(cos(z * 0.031) * 4.0) * 1.0 + sin(sin(z * 0.0091) * 3.0) * 3.0,\n        0.0 + cos(z * 0.1) * 1.0 + cos(cos(z * 0.031) * 4.0) * 1.0 + cos(sin(z * 0.0091) * 3.0) * 3.0\n    ) * 1.0;\n}\n\nvoid main( void ) \n{\n    vec2 p = (gl_FragCoord.xy*0.5-resolution)/min(resolution.x,resolution.y);\n    float x = 1.00;\n    float m = 3.0;\n    float camZ = 25.0 * time * x;\n    vec2 cam = position(camZ);\n\n    float dt = 1.0;\n    float camZ2 = 25.0 * (time + dt) * x;\n    vec2 cam2 = position(camZ2);\n    vec2 dcamdt = (cam2 - cam) / dt;\n    \n    vec3 f = vec3(0.0);\n    for(int j = 1; j < 300; j++) {\n        float i = float(j);\n        float realZ = floor(camZ) + i;\n        float screenZ = realZ - camZ;\n        float r = 1.0 / screenZ;\n        vec2 c = (position(realZ) - cam) * 10.0 / screenZ - dcamdt * 0.4;\n        vec3 color = (vec3(sin(realZ * 0.07), sin(realZ * 0.1), sin(realZ * 0.08)) + vec3(1.0)) / 2.0;\n        float ang = atan((p - c).y, (p - c).x);\n        r += sin((ang + time) * 10.0 + realZ * 13.2) * 0.01 * m\n           + sin(ang * 20.0 + realZ * 64.7  + time) * 0.005 * m\n           + sin((ang - time) * 30.0 + realZ * 239.9 + time) * 0.0025 * m;\n        f += color * 0.06 / screenZ / (abs(length(p - c) - r) + 0.01);\n    }\n\n    gl_FragColor = vec4(f, 1.0);\n}", "user": "b47557b", "parent": null, "id": 47326}