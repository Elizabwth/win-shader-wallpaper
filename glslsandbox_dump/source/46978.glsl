{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nvec3 scene_map(vec3 p)\n{\n    float r = 0.06;\n    float angle = time*13.0 + p.x*10.0-p.z*113.0-p.y*12.0;\n    float angle2 = time*12.0 + p.x*12.0+p.z*12.0+p.y*13.0;\n    p+=vec3(r*sin(angle)*sin(angle2),r*sin(angle)*cos(angle2),r*cos(angle));\n    return p;\n}\n\n\nvec4 scene_color(vec3 p)\n{\n   p=scene_map(p);\n   vec3 pp = p-vec3(0.0,0.0,0.0);\n\tpp=normalize(pp);\n\tvec3 comp = vec3(-0.8,0.7,-3.0);\n\tcomp=normalize(comp);\n        float d = dot(pp,comp);\n\tvec3 c1 = d*vec3(1.0,0.5,0.0);\n\td=pow(d,9.0);\n\tvec3 c2 = d*vec3(1.0,1.0,1.0);\n\tvec3 c = c1+c2;\n\tc = sqrt(c);\n    return vec4(c,1.0);\n}\n\n\nfloat scene(vec3 p)\n{\n   p=scene_map(p);\n\treturn length(p) - 0.4;\n}\n\nvec3 shoot_ray(vec3 r, vec3 d)\n{\n\tfloat t = 0.0;\n\tfloat len = length(d);\n\tfor(int i=0;i<30;i++)\n\t{\n\t     vec3 p = r+t*d;\n\t     float val = scene(p);\n             if (val<=0.0001) return p;\n\t     //val*=1.0;\n\t     t+=val/len;\n\t     if (t>1.0) return p;\n\t}\n\treturn r+t*d;\n}\n\nvoid main( void ) {\n\n\tvec2 position = ( gl_FragCoord.xy / resolution.yy );\n\tposition+=vec2(-0.5,-0.5);\n\t\n\tvec4 color = vec4(0.0,0.0,0.0,1.0);\n        vec3 ray = vec3(position.x, position.y, -100.0);\n\tvec3 dir = vec3(0.0,0.0,2000.0);\n\tvec3 p = shoot_ray(ray,dir);\n\tvec4 c = scene_color(p);\n\tgl_FragColor = vec4(c);\n\n}", "user": "c021c36", "parent": "/e#46965.0", "id": 46978}