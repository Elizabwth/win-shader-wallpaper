{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives: enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nfloat noise(vec2 p) {\n  return fract(sin(p.x + p.y * 10000.) * 10000.);\n}\n\nvec2 sw(vec2 p) {\n  return vec2(floor(p.x), floor(p.y));\n}\nvec2 se(vec2 p) {\n  return vec2(ceil(p.x), floor(p.y));\n}\nvec2 nw(vec2 p) {\n  return vec2(floor(p.x), ceil(p.y));\n}\nvec2 ne(vec2 p) {\n  return vec2(ceil(p.x), ceil(p.y));\n}\n\nfloat smoothNoise(vec2 p) {\n  vec2 interp = smoothstep(0., 1., fract(p));\n  float s = mix(noise(sw(p)), noise(se(p)), interp.x);\n  float n = mix(noise(nw(p)), noise(ne(p)), interp.x);\n  return mix(s, n, interp.y);\n}\n\nfloat fractalNoise(vec2 p) {\n  float x = 0.;\n  x += smoothNoise(p);\n  x += smoothNoise(p * 2.) / 2.;\n  x += smoothNoise(p * 4.) / 4.;\n  x += smoothNoise(p * 8.) / 8.;\n  x += smoothNoise(p * 16.) / 16.;\n  x /= 1. + 1. / 2. + 1. / 4. + 1. / 8. + 1. / 16.;\n  return x;\n}\n\nfloat movingNoise(vec2 p) {\n  float x = fractalNoise(p + time);\n  float y = fractalNoise(p - time);\n  return fractalNoise(p + vec2(x, y));\n}\n\n// call this for water noise function\nfloat nestedNoise(vec2 p) {\n  float x = movingNoise(p);\n  float y = movingNoise(p + 100.);\n  return movingNoise(p + vec2(x, y));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / resolution.xy;\n  float n = nestedNoise(uv * 6.);\n\n  fragColor = vec4(mix(vec3(.4, .6, 1.), vec3(.1, .2, 1.), n), 1.);\n}\n\nvoid main(void) {\n\n  vec2 position = (gl_FragCoord.xy / resolution.xy); //+ mouse / 4.0\n  position.y += mouse.x*(sin(2.0*time-gl_FragCoord.x/resolution.x)/5.0);\n  if (mouse.x>0.5)\n    position.x += time/2.0;\n  else\n    position.x += time/10.0;\n\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\n  float n = nestedNoise(uv * 6.);\n  if (position.y < -abs(sin(position.x * 30.0 - time)) / 15.0 + 0.4)\n    gl_FragColor = vec4(mix(vec3(.4, .6, 1.)*1.3, vec3(.1, .2, 1.)*1.3, n), 1.);\n  else if (position.y < -abs(sin(position.x * 30.0)) / 15.0 + 0.5)\n    gl_FragColor = vec4(mix(vec3(.4, .6, 1.), vec3(.1, .2, 1.), n), 1.);\n  else if (position.y < -abs(sin(position.x * 30.0 + time)) / 15.0 + 0.6)\n    gl_FragColor = vec4(mix(vec3(.4, .6, 1.)*0.8, vec3(.1, .2, 1.)*0.8, n), 1.);\n  else\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n}", "user": "8447947", "parent": "/e#46905.1", "id": 46948}