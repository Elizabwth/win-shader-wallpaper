{"code": "/*\n\t@Author Waqasul Haq\n\tTwitter: @iridule\n\tShaderToy: iridule\n\tInstagram: @the_iridule\n*/\n\nprecision mediump float;\n#define TUNNEL_DIST 500.\n\nuniform float time;\nuniform vec2 resolution;\n\nfloat iTime;\nvec2 iResolution;\n\n/*\n\t2D Noise functions by Patricio Gonzalez Vivo\n*/\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\n/*\n\tTunnel Scene\n*/\nvec3 color(in vec2 uv, float f, float a) {\n    return vec3(a * noise(uv * f));\n}\n\nvec3 tunnel(vec2 uv, float s) {\n    return vec3(length(uv * s));\n}\n\nfloat sinp(float a) {\n\treturn 0.5 + sin(a) * 0.5;\n}\n\nmat2 rotate(float a) {\n    return mat2(\n    \tcos(a),\n        sin(a),\n        -sin(a),\n        cos(a)\n    );\n\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\t\n    vec2 uv =(2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n    uv = rotate(iTime / 5.0) * uv;\n\t\n    /*\n\t\tMap to unit circle based on distance function\n\t*/\n    float inv = 1. / (length(uv));\n    vec2 uvp = uv * inv - vec2(2. * inv + 5. * iTime , 0.);\n\t\n    // the underlying movement\n    vec3 ambient = vec3(0., 0., .3);\n    ambient *= color(uvp, 4., 1.);\n\t\n    // twisting / glowing streaks\n    vec3 glow = vec3(0., .9, .9);\n    glow *= (color(uvp, 1.2, 1.) * length(uv));\n\t\n   \t// adding highlights based on multiplying noise  functions\n    vec3 highlights = vec3(0., 1., 2.);\n\n    // smooth step allows us to control noise values\n    highlights *= (1.0 - smoothstep(\n        .1,\n        .8,\n        (color(uvp, 2., 5.) * length(uv * 1.)) * (color(uvp, 25., 5.) * length(uv * 1.))\n        \n    ));\n\n\t// adding values together\n    vec3 final = vec3(\n        ambient * tunnel(uv, 1.) +\n        glow +\n        highlights * tunnel(uv, 0.6)\n    );\n\n    fragColor = vec4(final, 1.);\n\n}\n\nvoid main() {\n\tiTime = time;\n\tiResolution = resolution;\n\tmainImage(gl_FragColor, gl_FragCoord.xy);\n}", "user": "c7d64f5", "parent": null, "id": 47337}