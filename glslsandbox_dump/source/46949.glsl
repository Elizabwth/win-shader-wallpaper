{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives: enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nvarying vec2 surfacePosition;\n\nfloat smoothNoise(vec2 p) {\n\t\n\tvec2 f = fract(p); p-=f; f *= f*(3.-f-f); \n    \n    return dot(mat2(fract(sin(vec4(0, 1, 27, 28) + p.x+p.y*27.) * 1e5))*vec2(1.-f.y,f.y), vec2(1.-f.x, f.x));\n\n}\n\nfloat fractalNoise(vec2 p) {\n    return smoothNoise(p)*0.5333 + smoothNoise(p*2.)*0.2667 + smoothNoise(p*4.)*0.1333 + smoothNoise(p*8.)*0.0667;\n    \n}\n\nfloat nestedNoise(vec2 p) {\n    \n    vec2 m = vec2(time, -time)*.5;\n    float x = fractalNoise(p + m);\n    float y = fractalNoise(p + m.yx + x);\n    float z = fractalNoise(p - m - x + y);\n    return fractalNoise(p + vec2(x, y) + vec2(y, z) + vec2(z, x) + length(vec3(x, y, z))*0.25);\n    \n}\n\nvoid main(void) {\n  vec2 position = gl_FragCoord.xy / resolution.xy + surfacePosition;\n \n  position.x += time / 3.0;\n  position.y += sin(time - position.x * 2.0) / (mouse.x * 50.0 + 5.0);\n\n  vec3 c1 = vec3(.4, .6, 1.);\n  vec3 c2 = vec3(.1, .2, 1.);\n  /**/ if (position.y < -abs(sin(position.x * 20. /*  */)) / 10. + .4)\n    gl_FragColor = vec4(mix(c1 * 1.2, c2 * 1.2, nestedNoise(position * 4.)), 1.);\n  else if (position.y < -abs(sin(position.x * 20. - time)) / 15. + .5)\n    gl_FragColor = vec4(mix(c1 * 0.9, c2 * 0.9, nestedNoise(position * 5.)), 1.);\n  else if (position.y < -abs(sin(position.x * 30. + time)) / 15. + .6)\n    gl_FragColor = vec4(mix(c1 * 0.7, c2 * 0.7, nestedNoise(position * 6.)), 1.);\n  else\n    gl_FragColor = vec4(1., 1., 1., 1.);\n}", "user": "9145b6a", "parent": "/e#46948.4", "id": 46949}