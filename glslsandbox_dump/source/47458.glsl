{"code": "\n#ifdef GL_ES\nprecision lowp float;\n#endif\n\n\nuniform float time;\nuniform vec2 resolution;\n\n\nconst float count = 7.0;\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat Hash( vec2 p, in float s)\n{\n    vec3 p2 = vec3(p.xy,27.0 * abs(sin(s)));\n    return fract(sin(dot(p2,vec3(27.1,61.7, 12.4)))*273758.5453123);\n}\n\n\nmat2 m =mat2(0.8,0.6, -0.6, 0.8);\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  \tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n\nfloat fbm(vec2 p){\n\tfloat f=.0;\n\tf-= .500*noise(p); p*= m*2.02;\n\tf+= .150*noise(p); p*= m*2.03;\n\tf+= .650*noise(p); p*= m*2.01;\n\tf+= .65*noise(p); p*= m*2.04;\n\t\n\tf/= 0.9375;\n\t\n\treturn f;\n}\n\n\nvoid main( void ) \n{\n\n\nvec2 uv = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;\nuv.x *= resolution.x/resolution.y;\n\n\nvec3 finalColor = vec3( 0.0 );\nfor( float i=1.; i < count; ++i )\n{\nfloat t = abs(1./((uv.x + smoothstep(0.2,1.,fbm( uv + time/i))) * (i*5.0)));\nfinalColor +=  smoothstep(0.2,.0,t * vec3( i * 0.65 , 10, 2.0 ));\n}\n\tfinalColor=hsv2rgb(finalColor);\ngl_FragColor = vec4( finalColor, 1.0 );\n\n\n}", "user": "55b5624", "parent": "/e#47416.2", "id": 47458}