{"code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nvec2 position(float z) {\n\treturn vec2(\n\t\t0.0 + sin(z * 0.1) * 1.0 + sin(cos(z * 0.031) * 4.0) * 1.0 + sin(sin(z * 0.0091) * 3.0) * 3.0,\n\t\t0.0 + cos(z * 0.1) * 1.0 + cos(cos(z * 0.031) * 4.0) * 1.0 + cos(sin(z * 0.0091) * 3.0) * 3.0\n\t) * 1.0;\n}\n\nvoid main(void){\n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\tfloat camZ = 25.0 * time * 0.4;\n\tvec2 cam = position(camZ);\n\n\tfloat dt = 0.2;\n\tfloat camZ2 = 25.0 * (time * 0.4 + dt);\n \tvec2 cam2 = position(camZ2);\n\tvec2 dcamdt = (cam2 - cam) / dt;\n\t\n\tvec3 f = vec3(0.0);\n\tvec3 alpha = vec3(1.0);\n \tfor(float i = 1.0; i < 300.0; i++) {\n\t\tfloat realZ = floor(camZ) + i;\n\t\tfloat screenZ = realZ - camZ;\n\t\tfloat r = (4.0 + 2.0 * cos(realZ * 0.1) + cos(realZ * 0.034)) / screenZ;\n \t\tvec2 c = (position(realZ) - cam) * 10.0 / screenZ - dcamdt * 0.4;\n\t \tvec3 color = (vec3(sin(realZ * 0.07), sin(realZ * 0.1), sin(realZ * 0.08)) + vec3(1.0)) / 2.0;\n\t\tcolor *= min(0.06 / screenZ / (abs(length(p + c) - r) + 0.01),1.0);\n \t\tf += alpha * color; \n\t\talpha *= (1.0 - color);\n    }\n   \n    gl_FragColor = vec4(vec3(f), 1.0);\n}", "user": "307cc55", "parent": "/e#46827.1", "id": 47024}