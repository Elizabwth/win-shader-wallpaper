{"code": "// Original shadertoy https://www.shadertoy.com/view/Xd2fzV\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n\n\n\nbool box(vec2 pos, vec4 bounds)\n{\n    return ((pos.x >= bounds.x) && (pos.x <= bounds.z) && \n            (pos.y >= bounds.y) && (pos.y <= bounds.w));\n}\n\n\nconst vec3 blue = vec3(ivec3(0, 85, 155)) / 255.;\nconst vec3 white = vec3(1.0);\nconst vec3 red = vec3(1.0, 0.0, 0.0);\nconst vec3 pole_color = vec3(0.4, 0.4, 0.4);\nconst vec3 sky = vec3(0.8, 0.9, 1.0);\n\nvec3 scene(vec2 pos)\n{\n    vec3 color = sky;\n    \n    color = mix(color, pole_color, float(box(pos, vec4(-12., -20., -12., 10.))));\n    color = mix(color, pole_color, float(box(pos, vec4(-13., 8., -11., 9.))));\n    \n    pos.y += sin(-pos.x / 3. + floor(time * 7.)) * 1.01;\n\t    \n    color = mix(color, blue, float(box(pos, vec4(-10., -6, 10., 6))));\n    color = mix(color, white, float(box(pos, vec4(-3.66, -6, 10., 6))));\t\n    color = mix(color, red, float(box(pos, vec4(3.33, -6, 10., 6))));\t\n    return color;\n}\n\n\nvoid main( void ) {\n\n    vec2 uv = (gl_FragCoord.xy) / resolution.xy;\n    uv = (uv - 0.5) * 2.0; \n\n    //Adjust for aspect ratio\n    vec2 aspect_uv = uv * (resolution.xy / resolution.y);\n    \n    vec3 pole = vec3(0.);\n    \n    vec2 pixel_uv = floor(aspect_uv * 12.);\n    \n    gl_FragColor = vec4(scene(pixel_uv) + pole, 1.0);\n\n}\n", "user": "8c13546", "parent": null, "id": 47035}